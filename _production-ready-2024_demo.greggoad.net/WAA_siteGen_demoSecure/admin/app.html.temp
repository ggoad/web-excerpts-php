<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Demo Greg Goad Dot Net Admin Console</title>
<meta name="robots" content="noindex|nofollow"/>
<meta name="description" content="Demo Greg Goad Dot Net Admin Console"/>

<link rel="apple-touch-icon" sizes="180x180" href="/adminTest/appMedia/icons/regalG/180.png" />
<link rel="apple-touch-icon" sizes="152x152" href="/adminTest/appMedia/icons/regalG/152.png" />
<link rel="apple-touch-icon" sizes="120x120" href="/adminTest/appMedia/icons/regalG/120.png" />
<link rel="icon" sizes="16x16" href="/adminTest/appMedia/icons/regalG/16.png" />
<link rel="icon" sizes="32x32" href="/adminTest/appMedia/icons/regalG/32.png" />
<link rel="icon" sizes="57x57" href="/adminTest/appMedia/icons/regalG/57.png" />
<link rel="icon" sizes="76x76" href="/adminTest/appMedia/icons/regalG/76.png" />
<link rel="icon" sizes="96x96" href="/adminTest/appMedia/icons/regalG/96.png" />
<link rel="icon" sizes="120x120" href="/adminTest/appMedia/icons/regalG/120.png" />
<link rel="icon" sizes="128x128" href="/adminTest/appMedia/icons/regalG/128.png" />
<link rel="icon" sizes="144x144" href="/adminTest/appMedia/icons/regalG/144.png" />
<link rel="icon" sizes="152x152" href="/adminTest/appMedia/icons/regalG/152.png" />
<link rel="icon" sizes="167x167" href="/adminTest/appMedia/icons/regalG/167.png" />
<link rel="icon" sizes="180x180" href="/adminTest/appMedia/icons/regalG/180.png" />
<link rel="icon" sizes="192x192" href="/adminTest/appMedia/icons/regalG/192.png" />
<link rel="icon" sizes="195x195" href="/adminTest/appMedia/icons/regalG/195.png" />
<link rel="icon" sizes="196x196" href="/adminTest/appMedia/icons/regalG/196.png" />
<link rel="icon" sizes="228x228" href="/adminTest/appMedia/icons/regalG/228.png" />
<link rel="shortcut icon" sizes="196x196" href="/adminTest/appMedia/icons/regalG/196.png" />
<meta name="msapplication-TileImage" content="/adminTest/appMedia/icons/regalG/144.png" />
<meta property="og:image" content="/adminTest/appMedia/images/Mochobo/source.png" />
<meta property="og:image:alt" content="This is Crazy" />

<script>
if(!history.state || !history.state.VCR){
	console.log("here");
	history.replaceState({},'','https://demo.greggoad.net/adminTest');
}

USERDATA=`--USERDATA--`;

/* this is just so we have a function when we have to execute something,
// so we don't have to create an empty function every time (expensive in JS) */
function DUMMY_FUNCT(){}
_fun={
	curryScope:function(fun,scp){
		return function(){
			fun.apply(scp,arguments);
		};
	},
	curryArgs:function(fun, arg){
		if(!Array.isArray(arg)){throw new TypeError('Arg must be an array');}
		return function(){
			fun.apply({}, arg);
		};
	},
	curryScopeArgs:function(fun,scp,arg){
		if(!Array.isArray(arg)){throw new TypeError('Arg must be an array');}
		return function(){
			fun.apply(scp,arg);
		};
	},
	/* run an array of functions. keep indicates whether to erase the array after */
	RunQue:function(arr, keep){
	   arr.forEach(function(a){a();});
	   if(!keep){arr.length=0;}
	}
};
/* START _object */
_ob=_object={
	/* this is a legacy function. A long time ago, this was how you 'did' inheritance in JS */
	COPY_proto:(function(){
		function Temp(){}
		return function(O){
			if(typeof O != "object"){
				throw TypeError("Object prototype may only be an Object or null");
			}
			Temp.prototype=O;
			var obj=new Temp();
			Temp.prototype=null;
			return obj;
		};
	})(),
	/* combine 2 object into a new object */
	COMBINE:function(ob1, ob2){
		ob1=ob1 || {};
		ob2=ob2 || {};
		var ret={};
		this.INSERT(ret, ob1);
		this.INSERT(ret, ob2);
		return ret;
	},
	/* insert members into a reciever object */
	INSERT:function(reciever, con){
		con = con || {};
		for(var mem in con)
		{
			reciever[mem]=con[mem];
		}
	},
	/*  this could probably be removed */
	PARSE_default:function(def,set){
	   return this.COMBINE(def,set);
	},
	/* compare two objects, key by key */
	COMPARE:function(ob1, ob2){
		if(typeof ob1 !== "object" || typeof ob2 !== "object"){return false;}
		if(Object.keys(ob1).length !== Object.keys(ob2).length){return false;}
		var cmp=true;
		for(var mem in ob1)
		{
		   if(typeof ob1[mem] === "object"){
			  cmp=this.COMPARE(ob1[mem], ob2[mem]);
		   }else{
			  cmp=(ob1[mem] === ob2[mem]);
		   }
		   if(!cmp){return false;}
		}
		return true;
	},
	/* a control to set how deep clone will run recursively */
	CLONE_depthLimit:20,
	/* clone an object */
	CLONE:(function(){
		return function(obj, depth, callDepth){
			depth=depth || 1;
			callDepth=callDepth || 0;
			if(depth === -1){
				depth = this.CLONE_depthLimit;
				if(callDepth === this.CLONE_depthLimit){
					throw new TypeError("Depth limit reached: ", obj);
				}
			}
			
			if((obj === null || typeof obj !== "object") || (callDepth === depth || callDepth === this.CLONE_depthLimit)){
				return obj;
			}
			if(obj instanceof Date){
				return new Date(obj.getTime());
			}
			if(Array.isArray(obj)){
				var retArr=[];
				for(var i=0; i<obj.length; i++)
				{
					
					retArr[i]=this.CLONE(obj[i], depth, callDepth+1);
				}
				return retArr;
			}
			
			if(obj.CLONE){
				return obj.CLONE();
			}
			var ret={};
			for(var mem in obj)
			{
				if(obj.hasOwnProperty(mem)){
					ret[mem]=this.CLONE(obj[mem], depth, callDepth+1);
				}
			}
			return ret;
		};
	})()
};

/* Array.isArray polyfill */
if(!Array.isArray){
	Array.isArray=function(a){
		if(typeof a === "object" && a.constructor === Array){
			return true;
		}
	}
}
	

/* END _object*/

_hist={
	incrId:0,
   firstHistory:true,
   uriOb:{},
	url:false,
   logflag:true,
   documentTitle:'',
   globOb:null,
   GRAB_addr:function(){
      if(history && history.state && history.state.VCR){
         var VCRaddr=history.state.VCR;
         for(var mem in VCRaddr)
         {
             VCR[mem].historyChange=true;
             VCR[mem].stagedView=''+VCRaddr[mem].view;
             if(VCRaddr[mem].viewData){
                VCR[mem].PUSH_viewData(VCRaddr[mem].viewData);
             }
         }
      }
	   
   }
};


if(history && history.state && history.state.stateId){
	_hist.incrId=history.state.stateId;
}

if(history && history.pushState){
   VC.prototype.LOG_change=function(){
          var uriOb={};
          
                   
		  for(var mem in VCR)
		  {
			 if(VCR[mem].active && !VCR[mem].config.noLog){
                                var view;
				uriOb[mem]={
                                   view:(view=VCR[mem].currentView)
                                };
                                var vd=VCR[mem][VCR[mem].GET_viewName()].viewData;
                                if(!Object.keys(vd).length){vd=false;}
                                if(vd){
                                   uriOb[mem].viewData=VCR[mem][VCR[mem].GET_viewName()].viewData;
                                }
                                if(VCR[mem].captured){
                                   uriOb[mem].captured=true;
                                }
			 }
		  }
		  var globOb=_hist.globOb || {};
                  if(_hist.logflag){
		     if(!_hist.firstHistory && !_ob.COMPARE(uriOb, _hist.uriOb)){
  		       _hist.incrId++;
			   history.pushState(_hist.lastState=_ob.COMBINE({VCR:uriOb, stateId:_hist.incrId}, globOb),"",_hist.url || undefined);  
		     }else{
   	 		_hist.firstHistory=false;
  
			    history.replaceState(_hist.lastState=_ob.COMBINE({VCR:uriOb, stateId:_hist.incrId},globOb),"", _hist.url || undefined);  
		     }
                     
                  }
                   
			_hist.url=false;
                  _hist.uriOb=uriOb;
                  if(_hist.documentTitle){document.title=_hist.documentTitle; _hist.documentTitle="";}
	  
   };
   onpopstate=function(){
           var state=history.state;
           if(!state){
              history.replaceState(_hist.lastState,'',location.href);
              return;
           }else{
              state=state.VCR;
           }
           _hist.GRAB_addr();
           _hist.logflag=false;
           for(var mem in state)
           {
              if(!state[mem].captured){
                 VCR[mem].CHANGE();
              }
           }
	   _hist.logflag=true;
   };
}else{
   console.warn('no history supported');
}
/* START _element */
_el={
	/* cancel an event */
    CancelEvent:function(e){e.preventDefault(); e.cancelBubble=true;},
	/* move an id from 1 element to another */
    MoveId:function(id,el){
       (document.getElementById(id) || {}).id='';
       el.id=id;
    },
	/* this is a helper for CREATE */
    PARSE_element:function(a){
       if(typeof a === "string"){return this.TEXT(a);}
       return a;
    },
	/* remove an element */
	REMOVE:function(e){
		if(e && e.parentNode){e.parentNode.removeChild(e);}
	},
	/* append an element to a parent, returns the parent */
	APPEND:function(p,c){
		if(Array.isArray(c)){
			for(var i=0; i<c.length; i++)
			{
				p.appendChild(this.PARSE_element(c[i]));
			}
		}else{
			p.appendChild(this.PARSE_element(c));
		}
		return p;
	},
	/* append an element to a parent, returns the child */
	_APPEND:function(p,c){
		if(Array.isArray(c)){
		   c.forEach(function(a){p.appendChild(_el.PARSE_element(c));});
		}else{p.appendChild(this.PARSE_element(c));}
			

		return c;
	},
	/* 
		create an element: 
			tp is the tag name 
			id is id
			className is className 
			otherMemOb 
				is anything to insert as a property on the element
				two special properties:
					'style'
						and
					'attributes'
			append 
				an array of elements to append to the created element
				raw strings are created as text nodes
	*/
	CREATE:function(tp, id, className, otherMemOb, append){
		var ret=document.createElement(tp);
		if(id){
			ret.id=id;
		}
		if(className){
			ret.className=className;
		}
		if(otherMemOb){
			for(var mem in otherMemOb)
			{
				if(mem === "style"){
					for(var s in otherMemOb[mem])
					{
						ret.style[s]=otherMemOb[mem][s];
					}
				}else if(mem === 'attributes'){
					for(var a in otherMemOb[mem]){ret.setAttribute(a, otherMemOb[mem][a]);}
				}else{
					ret[mem]=otherMemOb[mem];
				}
			}
		}
		if(append){
		   this.APPEND(ret, append);
		}
		return ret;
	},
	/* create a text node */
	TEXT:function(txt){
		return document.createTextNode(txt);
	},
	/* removes all child elements */
	EMPTY:function(el){
		if(el && el.childNodes){
			for(var i=0; i<el.childNodes.length; i++)
			{
				if(el.childNodes[i]){
					el.removeChild(el.childNodes[i]);
					i--;
				}
			}
		}
	}
};


/* END _element */
function ElFetch( target,fetchMessage, file, config, responseType,responseHandlers,disablers){
    /*
      target: element to be the target,
      fetchMessage: a node to be appended to the target, 
     
         file:string, 
         config (the config of the actual call to fetch): {body:string, method:'POST', etc...}, 
         responseType: string json | text 
    */
    /* responseHandlers ={
         success: function(result, target){} to be fired on success
         fail: function(error, target){} to be fired on failure,
         overrideMsg: if you only want to display a single message on failure
       }
    */
    config=config || {};
    disablers=disablers || {};
    if(disablers.button){
       disablers.button.setAttribute('disabled','');
    }else if(disablers.form){
       var oldListener=disablers.form.onsubmit;
       disablers.form.onsubmit=function(e){
            e.stopImmediatePropagation();
            e.preventDefault();
            e.cancelBubble=true;
       }
    }else if(disablers.fieldset){
       disablers.fieldset.setAttribute('disabled','');
    }
    if(typeof fetchMessage === 'string'){fetchMessage=_el.TEXT(fetchMessage);}
    _el.APPEND(target, fetchMessage);
    fetch(file,config)
    .then(function(res){
        _el.REMOVE(fetchMessage);
        console.log("fetchResult:",res, res.status);
        if(parseInt(res.status) >= 400){
            console.log(file+" errorStatus: "+res.status);
            throw new Error("Server Error "+res.status);
        }
        return res[responseType]();
    }).then(function(rt){
        if(disablers.button){
           disablers.button.removeAttribute('disabled');
        }else if(disablers.form){
           disablers.form.onsubmit=oldListener;
        }else if(disablers.fieldset){
           disablers.fieldset.removeAttribute('disabled');
        }
        if((responseType === 'json' &&  rt.success) || rt === "SUCCESS"){
            _el.REMOVE(fetchMessage);
            responseHandlers.success(rt,target);
        }else{
            console.log('error', rt);
            var err= new Error(responseHandlers.overrideMsg || "Error Processing: "+((responseType === "json") ? (rt.msg || '') : rt || ''));
            err.dat=rt;
            throw err;
        }
        
    }).catch(function(e){
        _el.REMOVE(fetchMessage);
        if(disablers.button){
           disablers.button.removeAttribute('disabled');
        }else if(disablers.form){
           disablers.form.onsubmit=oldListener;
        }else if(disablers.fieldset){
           disablers.fieldset.removeAttribute('disabled');
        }
        console.log(e, e.dat || '');
        if(responseHandlers.fail){
           setTimeout(responseHandlers.fail(e,target), 1);
        }
        _el.REMOVE(fetchMessage);
        var m=e.message;
        if(e.message === 'Failed to fetch'){
            m=("There was a problem submitting. Possibly a network error. Please try again.");
        }
        console.log(file+" Fetch Error: "+m);
		if(!responseHandlers.quietError){
			_el.APPEND(target, m);
		}
    });
}
function SpecialFetch( file, config, responseType, responseSuccess, captureMessage, btn, frm, failFunction){
    config=config || {};
    
    var scap=ScreenCapture(captureMessage, btn, frm);
    fetch(file,config)
    .then(function(res){
        if(parseInt(res.status) >= 400){
            throw new Error("Server Error: "+res.status);
        }
        scap.CLOSE();
        return res[responseType]();
    }).then(function(rt){
        if((responseType === 'json' &&  rt.success) || rt === "SUCCESS"){
            responseSuccess(rt);
        }else{
            throw new Error("Processing Problem: "+(rt.msg || rt));
        }
        
    }).catch(function(e){
        
        scap.CLOSE();
        console.log(e);
        if(failFunction){
           setTimeout(failFunction, 1);
        }
        if(e.message === 'Failed to fetch'){
            alert("There was a problem submitting. Possibly a network error. Please try again.");
            return;
        }
        //globalE=e;
        //console.log(structuredClone(e));
        //console.log(JSON.stringify(e));
        alert("Error "+e.message);
    });
}
function ScreenCapture(msg, button, form){
    var mod=BasicModal();
    _el.REMOVE(mod.closer);
    
    mod.wrapper.id+=" screenCaptureWrapper";
    
    _el.APPEND(mod.client, _el.CREATE('h2','','',{},[msg]));
    
	_el.APPEND(mod.client, [
		_el.CREATE('br'),
		_el.CREATE('div','','lds-spinner',{},[
			_el.CREATE('div'),
			_el.CREATE('div'),
			_el.CREATE('div'),
			_el.CREATE('div'),
			_el.CREATE('div'),
			_el.CREATE('div'),
			_el.CREATE('div'),
			_el.CREATE('div'),
			_el.CREATE('div'),
			_el.CREATE('div'),
			_el.CREATE('div'),
			_el.CREATE('div')
		])
	]);
		
    var oldClose, oldListener;
    if(button){
        button.disabled=true;
        oldClose=mod.CLOSE;
        mod.CLOSE=function(){
            button.disabled=false;
            oldClose.call(this);
        }
    }
    if(form){
        oldListener=form.onsubmit;
        form.onsubmit=function(e){
            e.stopImmediatePropagation();
            e.preventDefault();
            e.cancelBubble=true;
           // console.log('here');
        }
        oldClose=mod.CLOSE;
        mod.CLOSE=function(){
            form.onsubmit=oldListener;
            oldClose.call(this);
        }
    }
    
    return mod;
}
function dFCM(fileName, config){
	this.fileName=fileName;
	this.VC=null;
	this.target=null;
	
	this.config=config || {};
	this.configOverride={};
}
dFCM.prototype.CAPTURE=function(VC, target, config){
	this.VC=VC || null; this.target=target || null; this.configOverride=config || {};
}
dFCM.prototype.RELEASE=function(){
	this.VC=null;
	this.target=null; 
	this.configOverride={};
}
dFCM.prototype.INSERT_value=function(rec, name, config, def){
    var r;
	if(typeof config[name] !== 'undefined'){
		r=config[name];
	}else if(typeof this.configOverride[name] !== "undefined"){
		r=this.configOverride[name];
	}else if(typeof this.config[name] !== "undefined"){
		r=this.config[name];
	}else if(typeof def !== 'undefined'){
		r=def;
	}
	if(typeof r === 'object'){
		r=_ob.CLONE(r);
	}
	
	return rec[name]=r;
	
}
dFCM.prototype.PARSE_value=function(name, config, def){
	if(typeof config[name] !== 'undefined'){
		return config[name];
	}
	if(typeof this.configOverride[name] !== "undefined"){
		return this.configOverride[name];
	}
	if(typeof this.config[name] !== "undefined"){
		return this.config[name];
	}
	if(typeof def !== 'undefined'){
		return def;
	}
	return undefined;
}
dFCM.prototype.RETRY=function(){
	this.CALL_data(this.callFun, this.callDat, this.callConfig);
};
dFCM.prototype.CALL_data=function(fun, dat, config){
	this.callFun=fun; this.callDat=dat; this.callConfig=config;
	config=config || {};
	var tar;
	_el.APPEND(this.target || _el.CREATE('div'), tar=_el.CREATE('div'));
	
	this.waitingFunction(tar);
	var stillGoodObject={good:true, target:tar};
	if(this.VC){
		this.VC.REGISTER_goodObject(stillGoodObject);
	}
	
	var reqOb={};
	this.INSERT_value(reqOb, 'method',config);
	this.INSERT_value(reqOb,'headers',config);
	this.INSERT_value(reqOb,'mode',config);
	this.INSERT_value(reqOb,'cache',config);
	this.INSERT_value(reqOb,'credentials',config);
	this.INSERT_value(reqOb,'redirect',config);
	this.INSERT_value(reqOb,'referrerPolicy',config);
	this.INSERT_value(reqOb, 'body', config, dat);
	
	//console.log('heythere', _ob.CLONE(reqOb), _ob.CLONE(config), _ob.CLONE(this.config));
	if(reqOb.headers && reqOb.headers['Content-Type'] === 'special/json'){
		reqOb.headers.contentType='application/json';
		reqOb.body=JSON.stringify(reqOb.body);
	}else if(reqOb.headers && reqOb.headers['Content-Type'] === 'special/obPost'){
		//console.log('yo you duede');
		reqOb.headers['Content-Type']="application/x-www-form-urlencoded";
		var uriStr="";
		for(var mem in reqOb.body)
		{
			if(typeof reqOb.body[mem] === "object"){
				reqOb.body[mem]=JSON.stringify(reqOb.body[mem]);
			}
			if(uriStr){uriStr+="&";}
			uriStr+=encodeURIComponent(mem)+"="+encodeURIComponent(reqOb.body[mem]);
		}
		reqOb.body=uriStr;
	}else if(config.useFormData || this.config.useFormData){
		var fd=new FormData();
		for(var mem in reqOb.body)
		{
			if(typeof reqOb.body[mem] === "object" && !(reqOb.body[mem] instanceof Blob)){
				reqOb.body[mem]=JSON.stringify(reqOb.body[mem]);
			}
			fd.append(mem, reqOb.body[mem]);
		}
		reqOb.body=fd;
	}
	if(reqOb.method === "GET" || reqOb.method === "HEAD" || !reqOb.method){
		delete reqOb.body;
	}
	
	var t=this;
	
		fetch(this.fileName, reqOb).then(t.checkResponseCode(config))
		.then(function(resDat){
			t.doneFunction();
			if(resDat.statusFail){
				console.log('statusFail', resDat);
				_el.REMOVE(tar);
				return;
			}
			if(stillGoodObject.good){
				fun(resDat);
			}
			_el.REMOVE(tar);
		}).catch(function(e){ t.handleError(e);});
	

	
}
dFCM.prototype.waitingFunction=function(target){
	
}
dFCM.prototype.doneFunction=function(){
	
}
dFCM.prototype.checkResponseCode=function(config){
	var t=this;
	return function(result){
		var rr=t.customResponseCodeCheck(result);
		if(rr){
			return new Promise(function(ro){ro({statusFail:true, message:rr});});
		}
		return result[t.PARSE_value('responseType',config, 'text')]();
	}
}
dFCM.prototype.customResponseCodeCheck=function(result){
	return '';
}
dFCM.prototype.handleError=function(e){
	return console.log('there was an error ',e);
}
RMF_basicNameArr=[
   "nameStack","formCol"
];
function EXTRACT_basic(a,b){
   for(var mem in RMF_basicNameArr)
   {
      a[mem]=b[mem]
   }
}

function RMFconcatName(nameStack, name){
  
   if(name || name === 0){
      if(nameStack){
         return nameStack+"-"+name;
      }return name;
   }return "";
}
function RMFgetName(config){
   return RMFconcatName(config.nameStack, config.name);
}

function RMFidHelper(id, app){
   app= app || "";
   if(id){
      return id+app;
   }return "";
}
function RMFclassHelper(cls, runner, cust, app){
   app=app || "";
   cls=cls || "";
   runner= runner || "";
   var ret="";
   
   ret+=cls+" ";
   if(runner){
      ret+=runner+app+" ";
   }
   if(cust){
      ret+=cust+app;
   }
   return ret.trim();
}
function RMFid(config, id){
   return RMFidHelper(config.id, id);
}
function RMFclass(config, cls, app){
   return RMFclassHelper(cls, config.classRunner, config.class, app);
}
function RMFsequenceHelper(text,client,tf){
    if(tf){
       return [client,text];
    }return [text,client];
}
function RMFdefaults(conf, def, specials){
   if(typeof conf !== "object"){
      throw new TypeError("Conf has to be an object");
   }
   def=def || {}; specials=specials || {};
   for(var mem in def)
   {
       if(typeof conf[mem] === "undefined"){
          conf[mem]=def[mem];
       }
   }
   for(var mem in specials)
   {
      if(specials[mem] === "rawBool"){
         conf[mem] = !!conf[mem]; 
      }
   }
}

function RMF_extractForExtension(ret, ob){
   for(var mem in ob)
   {
       ret[mem]=ob[mem];
   }
    if(ob.COLL){ob.EXT_OLDCOLL=ob.COLL;}
}
/*
  all configs get::: 
    nameStack - running name stack for nested inputs
    forColl   - the object to be recieving the form collection object
  from the MAKE function
*/
function RMFbasicRawInput(rmfdefault, rmfspecials, coll, set, bodyFunction){
   
    rmfdefault=rmfdefault || {};
    rmfspecials=rmfspecials || {};
    coll = coll;
    set = set || function(v){this.inp.value=v;}
    bodyFunction= bodyFunction || function(config,ret){
      ret.inp=ret.el=_el.TEXT("No body function provided.");
    }
    
    RMFdefaults(rmfdefault, {
        name:"",
        id:"",
        class:"",
        default:""
    });

    return function(config){
       config=config || {};
      // console.log(rmfdefault);
       RMFdefaults(config,rmfdefault, rmfspecials);
       //console.log(config);
       var ret={
           COLL:coll,
           SET:set
       };
       bodyFunction.call(this,config, ret);
       
       ret.SET("");
       return ret;
    } 
}
function RMFbasicInput(rmfdefault, rmfspecials, coll, set, bodyFunction, labelType){
    rmfdefault=rmfdefault || {};
    rmfspecials=rmfspecials || {};
    coll = coll;
    set = set || function(v){this.inp.value=v;}
    bodyFunction= bodyFunction || function(config,ret){
      ret.inp=ret.el=_el.TEXT("No body function provided.");
    }
    
    RMFdefaults(rmfdefault, {
        name:"",
        id:"",
        class:"",
        default:"",
        classRunner:""
    });
    return function(config){
       config=config || {};
      // console.log(rmfdefault);
       RMFdefaults(config,rmfdefault, rmfspecials);
       //console.log(config);
       var ret={
           COLL:coll,
           SET:set
       };
       bodyFunction.call(this,config, ret);
       this.basicLabelError({
          inp:ret.inp,
          otherRet:ret,
          labelText:config.labelText,
          labelSequence:config.labelSequence,
          labelType:labelType,
          errorText:config.errorText,
          errorSequence:config.errorSequence,
          data:config.data,
          dataType:config.dataType,
          classRunner:config.classRunner,
          class:config.class
       });
       ret.SET(config.default);
       return ret;
    }
}

/*
  all configs get::: 
    nameStack - running name stack for nested inputs
    forColl   - the object to be recieving the form collection object
  from the MAKE function
*/

function RMFbasicMultiInput(rmfdefault, rmfspecials, coll, inpList, insOb){
    rmfdefault=rmfdefault || {};
    rmfspecials=rmfspecials || {};
    coll = coll || function(a){return a;}
    
    insOb=insOb || {};
    
    RMFdefaults(rmfdefault, {
        name:"",
        id:"",
        class:"",
        default:"",
        preInps:{}
    });

    //alert("hey");
    return RMFbasicInput(rmfdefault, rmfspecials, function(){
       return coll(this.newCol.COLL());
    },
    function(v){
     //  console.log(this.newCol);
       this.newCol.SET(v);
    },//SET
    function(config, ret){
        ret.inp=_el.CREATE("div","","",{});
        
        for(var mem in insOb)
        {
          ret.inp[mem]=(function(m){
             return function(){
                 insOb[m].CALL(ret);
             }
          })(mem)
        }

        for(var i=0; i< inpList.lengh; i++)
        {
           inpsList[i]=_ob.COMBINE(inpList[i], config.preInps[inpList[i].name] || {});
        }

        var newColOb={};
        ret.newCol=newCol=new FORM_COL_OB(newColOb);
        MAKE(ret.inp, inpList, newColOb, RMFconcatName(config.nameStack, config.name), config.inpsConfig);
    },"section");
}

/*
  all configs get::: 
    nameStack - running name stack for nested inputs
    formColl   - the object to be recieving the form collection object
  from the MAKE function
*/



var INPTYPES={
   CURRY:function(name){
      var t=this;
      return function(config){
         return t[name](config);
      }
   },
   "span":function(config){
      RMFdefaults(config, {
        name:"", id:"", class:"", default:"", classRunner:""
      });
      var ret= {
        el:_el.CREATE('span', RMFid(config, "span"), RMFclass(config, "RMFspans"))
      };
      if(config.text){
         _el.APPEND(ret.el, _el.TEXT(config.text));
      }else if(config.element){
         _el.APPEND(ret.el, config.element);
      }
      return ret;
   },
   "basicLabelError":function(config){
       /*config is an object
          inp:the input to put in label and error,
          errorText: text for the error,
          errorSequence: true for the error after the input false for before,
          labelText: text for the label,
          labelSequence: true for the label after the input false for before,
          labelType: ENUM("label","section"),
          otherRet: a ret to recieve the members
          
       */
       config=config || {};
       //console.log(config.otherRet);
       RMFdefaults(config, {
         inp:_el.TEXT("ERROR: There was no inp provided"),
         errorText:"",
         labelText:"",
         errorSequence:true,
         labelSequence:false,
         labelType:"label",
         otherRet:{}
       },{
         labelSequence:"rawBool",
         errorSequence:"rawBool" 
       });
       
       var ret={};
       var errorBox=this.error({
         erroree:config.inp,
         text:config.errorText,
         sequence:config.errorSequence,
         classRunner:config.classRunner,
         class:config.class
      });
      ret.errorBox=errorBox.el;
      ret.errorTextBox=errorBox.textBox;
      
      var labelBox;
      if(config.labelType === "label"){
         labelBox=this.label({
            labelee:ret.errorBox,
            text:config.labelText,
            sequence:config.labelSequence,
            data:config.data,
            dataType:config.dataType,
            classRunner:config.classRunner,
            class:config.class
         });
      }else{
         labelBox=this.sectionLabel({
            labelee:ret.errorBox,
            text:config.labelText,
            sequence:config.labelSequence,
            data:config.data,
            dataType:config.dataType,
            classRunner:config.classRunner,
            class:config.class
         });
      }
      ret.el=ret.label=labelBox.el;
      ret.labelTextBox=labelBox.textBox;
       
       for(var mem in ret)
       {config.otherRet[mem]=ret[mem];}
       return ret;
   },
   "label":function(config){
      /*config is an object
         text: text for the label,
         labelee: element to be labeled,
         sequence: false for text before labelee true for after,
         id: an id to pass around,
         class: a class to pass around,
         name: a name to pass around
      */
      config=config || {};
      RMFdefaults(config, {
        text:"",
        labelee:_el.TEXT("No labelee given"),
        id:"",class:"",name:"",classRunner:""
      },{
        sequence:"rawBool"
      });

      var ret={};
      
      ret.el=_el.CREATE('label',RMFid(config, "label"),RMFclass(config, "RMFlabels","label"),{},RMFsequenceHelper(
         ret.textBox=_el.CREATE('span',RMFid(config, "textBox"),RMFclass(config, "RMFtextBoxes","textBox"),{},[RMFgetCard(config, 1)]),
         config.labelee,
         config.sequence
      ));

      


      return ret;
   },
   "sectionLabel":function(config){
       /*config is an object
          text: text for the label,
         labelee: element to be labeled,
         sequence: false for text before labelee true for after,
         id: an id to pass around,
         class: a class to pass around,
         name: a name to pass around
       */
      config=config || {};
      RMFdefaults(config, {
        text:"",
        labelee:_el.TEXT("No labelee given"),
        id:"",class:"",name:"",classRunner:""
      },{
        sequence:"rawBool"
      });

      var ret={};
      
      ret.el=_el.CREATE('div',RMFid(config, "sectionLabel"),RMFclass(config,"RMFsectionLabels", "sectionLabel"),{},RMFsequenceHelper(
         ret.textBox=_el.CREATE('div',RMFid(config, "textBox"),RMFclass(config,"RMFtextBoxes", "textBox"),{},[RMFgetCard(config, 0)]),
         config.labelee,
         config.sequence
      ));

      return ret;
   },
   "error":function(config){
      /*config is an object
         text: text for the label,
         erroree: element to be labeled for errors,
         sequence: false for text before labelee true for after,
         id: an id to pass around,
         class: a class to pass around,
         name: a name to pass around
      */
      config=config || {};
      RMFdefaults(config,{
          text:"",
          erroree:_el.TEXT("No erroree given"),
          id:"",class:"",name:"", classRunner:""
      },{
          sequence:"rawBool"
      });

      var ret={};
      
      ret.el=_el.CREATE('span',RMFid(config, "errorBox"),RMFclass(config, "RMFerrorBoxes","errorBox"),{},RMFsequenceHelper(
         ret.textBox=_el.CREATE('div',RMFid(config, "errorBoxTextBox"),RMFclass(config, "RMFtextBoxes","textBox"),{},[_el.TEXT(config.text)]),
         config.erroree,
         config.sequence
      ));

      return ret;
   },
   "header":function(config){
      /*config==>
         {
             level: the level of the header,
             text: the text in the header,
             id: an id for the header,
             class: a class to give to the header,
             name:a name for the id
         }
      */     
      config=config || {};
      config.nameStack=config.nameStack || "";
      config.name=config.name || "";
      config.wholeName=RMFconcatName(config.nameStack, config.name);
      config.level=config.level || 1;
      config.text=config.text || "";

      config.id=config.id || "";

      config.class= config.class || "";


      var ret={};
      ret.el=_el.CREATE('h'+config.level, RMFid(config, ""), RMFclass(config, "RMFheader","header"), {},[_el.TEXT(config.text)]);
      return ret;
   },
   "section":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFsection",
        inps:[]// inps: a list of inputs
      },/// rmfdefault
      {},// rmfspecials
      false,// COLL
      false,//SET
      function(config,ret){
        // console.log(config);
         ret.inp=_el.CREATE("div", RMFid(config), RMFclass(config, "RMFsection"), {}); 
         MAKE(ret.inp, config.inps, config.formCol, config.nameStack, config.inpsConfig);
      },
      "section"//labelType
   ),
   "compound":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFcompound",
        inps:[]// inps: a list of inputs
      },/// rmfdefault
      {},// rmfspecials
      function(){
         return this.FCOLL.COLL();
      },// COLL
      function(a){
         this.FCOLL.SET(a);
      },//SET
      function(config,ret){
        // console.log(config);
         ret.inp=_el.CREATE("div", RMFid(config), RMFclass(config, "RMFcompound"), {}); 
         var fc={};
         ret.FCOLL=new FORM_COL_OB(fc);
        // console.log('from compound', config);
         MAKE(ret.inp, config.inps, fc, RMFconcatName(config.nameStack, config.name), config.inpsConfig);
      },
      "section"//labelType
   ),
   "dynamicList":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFdynamicList",
        inpType:"singleLine", // listType is a string that is the name of the member of INPTYPES
        addText:"+Add", // the text to be in the add input button
        removeText:"X", // the text to be in the remove input button
        inpConfig:{}, // inpConfig: object to be passed to the listType function
        inpText:"",// inpText: text for each of the child input labels 
        beforeOrAfter:false
        // removeListener
        // inpTypeFunct // a function that returns the equivilant of what an inp type would
      },/// rmfdefault
      {},// rmfspecials
      function(){
         var ret=[];
         for(var mem in this.inps)
         {
            ret.push(this.inps[mem].COLL());
         }
         return ret;
      },// COLL
      function(v){
         v=v || [];
         var temp;
  		 this.CLEAR_inps();
         for(var i=0; i<v.length; i++)
         {
            temp=this.ADD_inp();
            temp.SET(v[i]);
         }
      },//SET
      (function(){ 
        function ADD_inp(v){
            var tempInp;// todo 
            if(this.config.inpTypeFunct){
               tempInp=this.config.inpTypeFunct({
                  name:RMFgetName({nameStack:this.config.nameStack, name:RMFconcatName(this.config.name, this.inpInd)}),
                  labelText:this.config.inpText
               });
            }else{
               tempInp=INPTYPES[this.config.inpType](_ob.COMBINE(this.config.inpConfig,{
                  name:RMFgetName({nameStack:this.config.nameStack, name:RMFconcatName(this.config.name, this.inpInd)}),
                  labelText:this.config.inpText
               }));
            }
            var remButton;
            var el=_el.CREATE('div',"",RMFclass(this.config, "RMFdynamicListMems", "dynamicListMem"),{
				attributes:{DATA_inpInd:this.inpInd}
			},[
              remButton=_el.CREATE('input',"",RMFclass(this.config,"RMFdynamicListMemRemoveButtons","dynamicListMemRemoveButton"),{
                 type:"button",
                 value:this.config.removeText,
                 onclick:REMOVE_inp,
                 DATA_ret:this,
                 DATA_inpInd:this.inpInd
               },[]),
               (tempInp).el
           ])
           tempInp.removeButton=remButton;
           this.inps[this.inpInd]=tempInp;
           this.inpInd++;
           if(this.config.beforeOrAfter){
              this.listCatcher.insertBefore(el, this.listCatcher.children[0]);
           }else{
              _el.APPEND(this.listCatcher, el);
           }
           if(this.config.addListener){
              this.config.addListener(tempInp);
           }
           if(v){
			   tempInp.SET(v);
		   }
           return tempInp;
        }
		
		function CLEAR_inps(){
			for(var mem in this.inps)
			{
				this.inps[mem].removeButton.dispatchEvent(new Event('click'));
			}
		}
        function REMOVE_inp(){
           _el.REMOVE(this.parentNode);
           if(this.DATA_ret.config.removeListener){
              this.DATA_ret.config.removeListener(this.DATA_ret.inps[this.DATA_inpInd]);
           }
           delete this.DATA_ret.inps[this.DATA_inpInd];
        }
        var inpFunct;
        return function(config,ret){
           // console.log(config);
           ret.inpFunct=this[config.inpType];
           ret.inpInd=0;
           ret.inps={};
           ret.config=config;
           ret.ADD_inp=ADD_inp;
		   ret.CLEAR_inps=CLEAR_inps;
           ret.inpType=config.inpType;
           ret.inp=_el.CREATE("div", RMFid(config), RMFclass(config, "RMFdynamicList","dynamicList"), {},[]); 
           ret.EMPTY=function(){
              for(var mem in this.inps)
              {
                 this.inps[mem].removeButton.onclick.call(this.inps[mem].removeButton);
              }
           }
           if(!config.beforeOrAfter){
              _el.APPEND(ret.inp, ret.listCatcher=_el.CREATE('div',RMFid(config, "listCatcher"), RMFclass(config,"RMFdynamicListCatcher","dynamicListCatcher")));
           }
           _el.APPEND(ret.inp,_el.CREATE('input',RMFid(config,"addButton"),RMFclass(config, "RMFdynamicListAddButton","dynamicListAddButton"),{
                 type:"button",
                 value:config.addText,
                 onclick:function(){
                    ret.ADD_inp();
                 }
              }));
           if(config.beforeOrAfter){
              _el.APPEND(ret.inp, ret.listCatcher=_el.CREATE('div', RMFid(config, "listCatcher"), RMFclass(config,"RMFdynamicListCatcher","dynamicListCatcher")));
           }
         }
      })(),
      "section"//labelType
   ),
   "dynamicListOrdered":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFdynamicList",
        inpType:"singleLine", // listType is a string that is the name of the member of INPTYPES
        addText:"+Add", // the text to be in the add input button
        removeText:"X", // the text to be in the remove input button
        inpConfig:{}, // inpConfig: object to be passed to the listType function
        inpText:"",// inpText: text for each of the child input labels 
        beforeOrAfter:false
        // removeListener
        // inpTypeFunct // a function that returns the equivilant of what an inp type would
      },/// rmfdefault
      {},// rmfspecials
      function(){
         return Array.from(this.listCatcher.children).map(function(c){return c.FUN_coll();});
      },// COLL
      function(v){
         v=v || [];
         var temp;
  		 this.CLEAR_inps();
         for(var i=0; i<v.length; i++)
         {
            temp=this.ADD_inp();
            temp.SET(v[i]);
         }
      },//SET
      (function(){ 
        function ADD_inp(v){
            var tempInp;// todo 
            if(this.config.inpTypeFunct){
               tempInp=this.config.inpTypeFunct({
                  name:RMFgetName({nameStack:this.config.nameStack, name:RMFconcatName(this.config.name, this.inpInd)}),
                  labelText:this.config.inpText
               });
            }else{
               tempInp=INPTYPES[this.config.inpType](_ob.COMBINE(this.config.inpConfig,{
                  name:RMFgetName({nameStack:this.config.nameStack, name:RMFconcatName(this.config.name, this.inpInd)}),
                  labelText:this.config.inpText
               }));
            }
            var remButton;
            var el=_el.CREATE('div',"",RMFclass(this.config, "RMFdynamicListMems", "dynamicListMem"),{
				attributes:{DATA_inpInd:this.inpInd},
				FUN_coll:function(){
					return tempInp.COLL()
				}
			},[
				_el.CREATE('input','','',{type:'button',value:'T',onclick:function(){
					var par=this.parentNode;
					var parpar=par.parentNode;
					var ps=par.previousSibling;
					if(ps){
						_el.REMOVE(par);
						parpar.insertBefore(par, ps);
					}
				}}),
				_el.CREATE('input','','',{type:'button',value:'V', onclick:function(){
					var par=this.parentNode;
					var parpar=par.parentNode;
					var ns=(par.nextSibling || {}).nextSibling;
					_el.REMOVE(par);
					parpar.insertBefore(par, ns);

				}}),
              remButton=_el.CREATE('input',"",RMFclass(this.config,"RMFdynamicListMemRemoveButtons","dynamicListMemRemoveButton"),{
                 type:"button",
                 value:this.config.removeText,
                 onclick:REMOVE_inp,
                 DATA_ret:this,
                 DATA_inpInd:this.inpInd
               },[]),
               (tempInp).el
           ])
           tempInp.removeButton=remButton;
           this.inps[this.inpInd]=tempInp;
           this.inpInd++;
           if(this.config.beforeOrAfter){
              this.listCatcher.insertBefore(el, this.listCatcher.children[0]);
           }else{
              _el.APPEND(this.listCatcher, el);
           }
           if(this.config.addListener){
              this.config.addListener(tempInp);
           }
           if(v){
			   tempInp.SET(v);
		   }
           return tempInp;
        }
		
		function CLEAR_inps(){
			for(var mem in this.inps)
			{
				this.inps[mem].removeButton.dispatchEvent(new Event('click'));
			}
		}
        function REMOVE_inp(){
           _el.REMOVE(this.parentNode);
           if(this.DATA_ret.config.removeListener){
              this.DATA_ret.config.removeListener(this.DATA_ret.inps[this.DATA_inpInd]);
           }
           delete this.DATA_ret.inps[this.DATA_inpInd];
        }
        var inpFunct;
        return function(config,ret){
           // console.log(config);
           ret.inpFunct=this[config.inpType];
           ret.inpInd=0;
           ret.inps={};
           ret.config=config;
           ret.ADD_inp=ADD_inp;
		   ret.CLEAR_inps=CLEAR_inps;
           ret.inpType=config.inpType;
           ret.inp=_el.CREATE("div", RMFid(config), RMFclass(config, "RMFdynamicList","dynamicList"), {},[]); 
           ret.EMPTY=function(){
              for(var mem in this.inps)
              {
                 this.inps[mem].removeButton.onclick.call(this.inps[mem].removeButton);
              }
           }
           if(!config.beforeOrAfter){
              _el.APPEND(ret.inp, ret.listCatcher=_el.CREATE('div',RMFid(config, "listCatcher"), RMFclass(config,"RMFdynamicListCatcher","dynamicListCatcher")));
           }
           _el.APPEND(ret.inp,_el.CREATE('input',RMFid(config,"addButton"),RMFclass(config, "RMFdynamicListAddButton","dynamicListAddButton"),{
                 type:"button",
                 value:config.addText,
                 onclick:function(){
                    ret.ADD_inp();
                 }
              }));
           if(config.beforeOrAfter){
              _el.APPEND(ret.inp, ret.listCatcher=_el.CREATE('div', RMFid(config, "listCatcher"), RMFclass(config,"RMFdynamicListCatcher","dynamicListCatcher")));
           }
         }
      })(),
      "section"//labelType
   ),
   "singleLine":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFsingleLine",
        placeHolder:""
      },/// rmfdefault
      {},// rmfspecials
      function(){return this.inp.value;},// COLL
      function(v){this.inp.value=v;},//SET
      function(config,ret){
        // console.log(config);
         ret.inp=_el.CREATE("input", RMFid(config, "singleLine"), RMFclass(config,"RMFsingleLine","singleLine"), {
           name:RMFgetName(config), 
           placeholder: config.placeHolder,
           value:config.default
         }); 
      },
      "label"//labelType
   ),
   
   "basicCoreDate":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFsingleLine",
        placeHolder:""
      },/// rmfdefault
      {},// rmfspecials
      function(){return this.inp.value;},// COLL
      function(v){this.inp.value=v;},//SET
      function(config,ret){
        // console.log(config);
         ret.inp=_el.CREATE("input", RMFid(config, "singleLine"), RMFclass(config,"RMFsingleLine","singleLine"), {
           name:RMFgetName(config), 
           placeholder: config.placeHolder,
           value:config.default,
		   type:'date'
         }); 
      },
      "label"//labelType
   ),
   "basicCoreTime":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFsingleLine",
        placeHolder:""
      },/// rmfdefault
      {},// rmfspecials
      function(){return this.inp.value;},// COLL
      function(v){this.inp.value=v;},//SET
      function(config,ret){
        // console.log(config);
         ret.inp=_el.CREATE("input", RMFid(config, "singleLine"), RMFclass(config,"RMFsingleLine","singleLine"), {
           name:RMFgetName(config), 
           placeholder: config.placeHolder,
           value:config.default,
		   type:'time'
         }); 
      },
      "label"//labelType
   ),
   "checkbox":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFcheckbox",
        default:false
      },/// rmfdefault
      {default:"rawBool"},// rmfspecials
      function(){return this.inp.checked;},// COLL
      function(v){this.inp.checked=!!v;},//SET
      function(config,ret){
         var val = RMFgetValue(config);
        // alert(JSON.stringify(config));
         ret.inp=_el.CREATE('input',RMFid(config, "checkbox"), RMFclass(config,"RMFcheckbox","checkbox"),{
          type:"checkbox",
          checked:config.default,
          name:RMFgetName(config)
         });
         // alert(JSON.stringify(val));
         if(val !== ""){
            ret.inp.value=val;
            ret.inp.obVal=val;
         }
      //    alert(RMFgetName(config)+" "+JSON.stringify(config));
      },
      "label"//labelType
   ),
   "checkFamily":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for radio Input
            id: id for radio input ("")
            class:class for radio ("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFcheckFamily",
        inps:[] // a list of inps objects for the checkboxes in the family minus the name attribute with an extra 'value' member
       
      },/// rmfdefault
      {},// rmfspecials
      function(){
        var ret=[];
        for(var i=0; i<this.inps.length; i++)
        {
           if(this.inps[i].inp.checked === true){
              ret.push(this.inps[i].inp.obVal);
              //console.log(this.inps[i].inp.value);
           }
        }
        return ret;
      },// COLL
      function(v){
        v=v || [];
        var inf={};
        for(var i=0; i<v.length && v!=="all"; i++)
        {
           inf[v[i]]=true;
        }
        for(var i=0; i<this.inps.length; i++)
        {
           if( v === "all" || inf[this.inps[i].inp.value]){
              this.inps[i].inp.checked=true;
              continue;
           }this.inps[i].inp.checked=false;
        }
      },//SET
      function(config,ret){
         ret.inp=_el.CREATE('div',RMFid(config, "checkFamily"), RMFclass(config,"RMFcheckFamily","checkFamily"),{});
         ret.inps=[];
         for(var i=0; i<config.inps.length; i++)
         {
            var temp=this.checkbox(_ob.COMBINE(config.inps[i], {classRunner:config.classRunner,nameStack:config.nameStack, name:RMFconcatName(config.name, config.inps[i].value)}));
            _el.APPEND(ret.inp, temp.el);
            ret.inps.push(temp);
         }
      },
      "section"//labelType
   ),
   "radio":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for radio Input
            id: id for radio input ("")
            class:class for radio ("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFradio",
        default:false,
        onchange:""
      },/// rmfdefault
      {default:"rawBool"},// rmfspecials
      function(){if(this.inp.checked){return this.inp.value;}return undefined;},// COLL
      function(v){
        if(v === this.inp.value){this.inp.checked=true; return;}this.inp.checked=false;
      },//SET
      function(config,ret){
         ret.inp=_el.CREATE('input',RMFid(config, "radio"), RMFclass(config,"RMFradio","radio"),{
           type:"radio",
           checked:config.default,
           name:RMFgetName(config),
           onchange:config.onchange,
           value:RMFgetValue(config)
         });
      },
      "label"//labelType
   ),
   "radioFamily":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
          classRunner:"RMFradioFamily",
          inps:[],//  inps:a list of inp configs for the 'radio' inp type minus 'name' 'id' and 'class',
           onchange:""
      },/// rmfdefault
      {},// rmfspecials
      function(){
             var hol;
             for(var i=0; i<this.inps.length; i++)
             {
               if(typeof (hol=this.inps[i].COLL()) !== "undefined"){
                  return hol;
               }
             }return "";
      },// COLL
      function(v){
         for(var i=0; i<this.inps.length; i++)
         {
            this.inps[i].SET(v);
         }
      },//SET
      function(config,ret){
          ret.inps=[];
          ret.inp=_el.CREATE('div',RMFid(config, "radioFamily"), RMFclass(config,"RMFradioFamily","radioFamily"),{});
          for(var i=0; i<config.inps.length; i++)
          {
            var temp;
             ret.inps.push(temp=this.radio(_ob.COMBINE(config.inps[i],{
                name:config.name,
                onchange:config.onchange,
                nameStack:config.nameStack,
                classRunner:config.classRunner
             })));     
             if(config.default === temp.value){
                temp.checked=true;
             }
             _el.APPEND(ret.inp, temp.el);
          }
      },
      "section"//labelType
   ),
   "select":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFselect",
        inps:[], // opts: an array of objcts for creating options {value: "", labelText:""}
      },/// rmfdefault
      {},// rmfspecials
      function(){
        if(this.inp.options.length && this.inp.options[this.inp.selectedIndex]){
           return this.inp.options[this.inp.selectedIndex].value;
        }return null;
      },// COLL
      function(v){
        for(var i=0; i<this.inp.options.length; i++)
        {
          if(this.inp.options[i].value === v){
             this.inp.selectedIndex=i;
				 this.inp.dispatchEvent(new Event('change'));
			 break;
          }
        }
      },//SET
      function(config,ret){
         
         var optsList=[];
         var selectedIndex=0;
		 var opt;
		 ret.CHANGE_options=function(arr){
			 Array.from(ret.inp.children).forEach(function(a){
					 _el.REMOVE(a);
			 });
			 arr.forEach(function(a){
				 _el.APPEND(ret.inp, _el.CREATE('option','','',{value:a.value},[a.labelText]));
			 });
		 }
         for(var i=0; i<config.inps.length; i++)
         {
            if((!i && !config.default)){
                config.default=config.inps[i].value;
            }
            optsList.push(opt=_el.CREATE('option',RMFid(config, "option"), RMFclass(config,"RMFoption","option"),{value:RMFgetValue(config.inps[i])},[RMFgetCard(config.inps[i],0)]));
			if(config.inps[i].class){opt.className+=' '+config.inps[i].class;}
            if(config.inps[i].value === config.default){
               selectedIndex=i;
            }
         }
         ret.inp=_el.CREATE("select",RMFid(config, "select"), RMFclass(config,"RMFselect","select"),
		 _ob.COMBINE({
           name:RMFgetName(config),
           selectedIndex:selectedIndex
         },config.selectInsert || {}),
		 optsList);
		 ret.inp.selectedIndex=selectedIndex;
      },
      "label"//labelType
   ),
   "distinct":function(config){
      config=config || {};
      RMFdefaults(config, {
        distinctMode:"radio"
      });
      switch(config.distinctMode){
         case "radio":
           return this.radioFamily(config);
           break;
         case "select":
           return this.select(config);
           break;
      }
   },
   "selectToNew":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFselectToNew",
        selectConfig:{},// selectConfig: an object to be passed
        dynamicConfig:{},// a config to be passed to the single line inp
      },/// rmfdefault
      {},// rmfspecials
      function(){
        var selVal=this.selectInp.COLL();
        if(selVal === "--NEW--"){
           return this.dynamicInp.COLL();
        } 
        return selVal;
      },// COLL
      function(v){
         for(var i=0; i<this.selectInp.inp.options.length; i++)
         {
           // alert("yo");
           // alert(v+" - "+this.selectInp.inp.options[i].value);
            if(this.selectInp.inp.options[i].value == v){
                this.selectInp.SET(v);
               // alert("hey");
                return;
            }
         }
         this.selectInp.inp.selectedIndex=0;
         this.selectInp.inp.onchange.call(this.selectInp.inp);
         this.dynamicInp.SET(v); 
         
      },//SET
      function(config,ret){
         if(config.inps[0].value !== "--NEW--"){
            if(!("default" in config.selectConfig)){
               config.selectConfig.default=config.inps[0].value;
                //alert(config.selectConfig.inps[0].value);
            }
            config.inps.unshift({
              value:"--NEW--",
              labelText:"New"
            });
         }
         
		 ret.CHANGE_options=function(arr){
			 Array.from(ret.selectInp.inp.children).forEach(function(a){
				 if(a.value && a.value !== '--NEW--'){
					 _el.REMOVE(a);
				 }
			 });
			 arr.forEach(function(a){
				 _el.APPEND(ret.selectInp.inp, _el.CREATE('option','','',{value:a.value},[a.labelText]));
			 });
		 }
         ret.inp=_el.CREATE("div", RMFid(config, "selectToNew"), RMFclass(config,"RMFselectToNew","selectToNew"), {}); 
         config.dynamicConfig.name=config.name+"-NEW";
         config.dynamicConfig.nameStack=config.nameStack;
         ret.dynamicInpFunct=this.CURRY(config.dynamicConfig.type || "singleLine");
         var temp;
         _el.APPEND(ret.inp,[
            (temp=this.select(_ob.COMBINE(config.selectConfig,{
             name:config.name, inps:config.inps, nameStack:config.nameStack, classRunner:config.classRunner
            }))).el,
            ret.dynCatcher=_el.CREATE('div',RMFid(config, "selectToNewCatcher"), RMFclass(config,"RMFselectToNewCatcher","selectToNewCatcher"))
         ]);
         ret.selectInp=temp;
         temp.inp.onchange=function(){
           _el.EMPTY(ret.dynCatcher);
           if(this.options[this.selectedIndex].value === "--NEW--"){
              var temp=ret.dynamicInpFunct(config.dynamicConfig);
              _el.APPEND(ret.dynCatcher, temp.el);
              ret.dynamicInp=temp;
           }
         }
      },
      "label"//labelType
   ),
   "radioToNew":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFradioToNew",
        radioFamilyConfig:{},
        dynamicConfig:{}
        
      },/// rmfdefault
      {},// rmfspecials
      function(){
        var ret=this.radioInp.COLL();
        if(ret === "--NEW--"){
           ret=this.dynamicInp.COLL();
        }return ret;
      },// COLL
      function(v){
        for(var i=0; i<this.radioInp.inps.length; i++)
        {
           if(this.radioInp.inps[i].inp.value === v){
              this.radioInp.inps[i].inp.checked=true;
              return;
           }
        }
        this.radioInp.inps[i-1].inp.checked=true;
        this.radioInp.inps[i-1].inp.onchange.call(this.radioInp.inps[i-1].inp);
        this.dynamicInp.SET(v);
      },//SET
      function(config,ret){
         if(config.inps[config.inps.length-1].value !== "--NEW--"){
            if(!("default" in config.radioFamilyConfig)){
               config.radioFamilyConfig.default=config.inps[0].value;
                //alert(config.selectConfig.inps[0].value);
            }
            config.inps.push({
              value:"--NEW--",
              labelText:"New"
            });
         }
         ret.inp=_el.CREATE("div", RMFid(config, "radioToNew"), RMFclass(config,"RMFradioToNew","radioToNew"), {}); 
        
         var temp;
         _el.APPEND(ret.inp,[
            (temp=this.radioFamily(_ob.COMBINE(config.radioFamilyConfig, {nameStack:config.nameStack,name:config.name, inps:config.inps,
               onchange:function(){
                //alert("hey");
               _el.EMPTY(ret.dynCatcher);
                //console.log(this);
               if(this.value === "--NEW--"){
                 // alert("yo");
                  console.log(ret.dynCatcher);
                  var temp=ret.dynamicInpFunct(config.dynamicConfig);
                  //console.log(temp)
                  _el.APPEND(ret.dynCatcher, temp.el);
                  ret.dynamicInp=temp;
                  //ret.dynCatcher.style.border="3px solid red";
                  //console.log(ret.dynCatcher.children);
               }
             }
            }))).el,
            ret.dynCatcher=_el.CREATE('div',RMFid(config, "radioToNewCatcher"), RMFclass(config,"RMFradioToNewCatcher","radioToNewCatcher"))
         ]);
         ret.radioInp=temp;
         config.dynamicConfig.name=config.name+"-NEW";
         config.dynamicConfig.nameStack=config.nameStack;
         ret.dynamicInpFunct=this.CURRY(config.dynamicConfig.type || 'singleLine');
         
         
      },
      "section"//labelType
   ),
   "paragraph":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFparagraph",
        placeHolder:"", // placeHolder: a text to hold the place in the input
      },/// rmfdefault
      {},// rmfspecials
      function(){return this.inp.value;},// COLL
      function(v){this.inp.value=v;},//SET
      function(config,ret){
         var attributes={};
		 if(typeof config.spellCheck !== "undefined"){
			 if(!config.spellCheck){
				 attributes.spellcheck="false";
			 }
		 }
		 if(typeof config.wordWrap !== "undefined"){
			 if(!config.wordWrap){
				 attributes.wrap="off";
			 }
		 }
         ret.inp=_el.CREATE("textarea", RMFid(config, "paragraph"), RMFclass(config,"RMFparagraph","paragraph"), {
           name:RMFgetName(config), 
           placeholder: config.placeHolder,
           value:config.default,
		   attributes:attributes
		   
         }); 
      },
      "section"//labelType
   ),
   "shark":RMFbasicMultiInput({
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
            preInps: any arguments you want to send in the config of the inps by name ({})
        */
    },//rmfdefault 
    {},//rmfspecials 
    function(a){//coll
      return a;
    }, [//inpList
      {
        type:"singleLine",
        name:"name",
        labelText:"Name"
      },
      {
        type:"select",
        labelText:"Species",
        name:"species",
        inps:[
           {
              value:"greatWhite",
              labelText:"Great White"
           },
           {
              value:"hammer",
              labelText:"Hammer Head"
           }
        ]
      }
    ]),
    "dynamicOnRadio":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFdynamicOnRadio",
        dynamicForms:{}, // placeHolder: a text to hold the place in the input
        radioFamilyConfig:{}, 
        
      },/// rmfdefault
      {},// rmfspecials
      function(){
         var nam=this.radioFamilyInp.COLL();
         var ret={};
         ret[nam]=this.dynamicFormColl.COLL();
         return ret;
      },// COLL
      function(v){
         v=v || {};
         for(var mem in v)
         {
            this.radioFamilyInp.SET(mem);
            this.RADCHANGE();
            this.dynamicFormColl.SET(v[mem]);
         }
      },//SET
      function(config,ret){
         config.radioFamilyConfig.inps=[];
         config.radioFamilyConfig.name=config.name
         config.radioFamilyConfig.nameStack=config.nameStack;
         for(var mem in config.dynamicForms)
         {
            config.radioFamilyConfig.inps.push({
              labelText:config.dynamicForms[mem].labelText,
              value:mem
            });
         }
         function CHANGE(){
            var fo={};
            ret.dynamicFormColl=new FORM_COL_OB(fo);
            var cat=ret.radioFamilyInp.COLL();
            if(cat){
               MAKE(ret.dynamicContainer, config.dynamicForms[cat].form, fo, RMFconcatName(RMFconcatName(config.nameStack,config.name), cat), config.dynamicForms[cat].config || false);
            }else{
               _el.EMPTY(ret.dynamicContainer);
            }
         } 
         ret.RADCHANGE=CHANGE;
         ret.inp=_el.CREATE("div", RMFid(config, "dynamicOnRadio"), RMFclass(config,"RMFdynamicOnRadio","dynamicOnRadio"), {},[
            ret.radioContainer=_el.CREATE('div',RMFid(config, "dynamicOnRadioRadioContainer"), RMFclass(config,"RMFdynamicOnRadioRadioContainer","dynamicOnRadioRadioContainer"),{
               onchange:function(){
                 CHANGE();
               }
            }),
            ret.dynamicContainer=_el.CREATE('div',RMFid(config, "dynamicOnRadioDynamicContainer"), RMFclass(config,"RMFdynamicOnRadioDynamicContainer","dynamicOnRadioDynamicContainer"))
         ]); 

         ret.radioFamilyInp=this.radioFamily(config.radioFamilyConfig);
         _el.APPEND(ret.radioContainer, ret.radioFamilyInp.el);
         CHANGE();
      },
      "section"//labelType
   ),
    "dynamicOnRadioFallthrough":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFdynamicOnRadioFallthrough",
        dynamicInps:{}, // placeHolder: a text to hold the place in the input
        radioFamilyConfig:{}, 
        
      },/// rmfdefault
      {},// rmfspecials
      function(){
         var nam=this.radioFamilyInp.COLL();
         var ret={};
         if(typeof this.dynamicInpColl.COLL !== "function"){
            return {};
         }
         return this.dynamicInpColl.COLL();
         return ret;
      },// COLL
      function(v){
         v=v || {};
         for(var mem in v)
         {
            this.radioFamilyInp.SET(mem);
            this.RADCHANGE();
            this.dynamicInpColl.SET(v[mem]);
         }
      },//SET
      function(config,ret){
         config.radioFamilyConfig.inps=[];
         config.radioFamilyConfig.name=config.name
         config.radioFamilyConfig.nameStack=config.nameStack;
         for(var mem in config.dynamicInps)
         {
            config.radioFamilyConfig.inps.push({
              labelText:config.dynamicInps[mem].labelText,
              value:mem
            });
         }
         function CHANGE(){
            var fo={};
            ret.dynamicFormColl=new FORM_COL_OB(fo);
            var cat=ret.radioFamilyInp.COLL();
            var dynamicInp=config.dynamicInps[cat];
            _el.EMPTY(ret.dynamicContainer);
            if(dynamicInp){
               ret.dynamicInpColl=INPTYPES[dynamicInp.inpType](_ob.COMBINE(dynamicInp.config, {nameStack:config.nameStack, name:config.name}));
               _el.APPEND(ret.dynamicContainer, ret.dynamicInpColl.el);
            }else{
               _el.EMPTY(ret.dynamicContainer);
            }
         } 
         ret.RADCHANGE=CHANGE;
         ret.inp=_el.CREATE("div", RMFid(config, "dynamicOnRadioFallthrough"), RMFclass(config,"RMFdynamicOnRadio","dynamicOnRadio"), {},[
            ret.radioContainer=_el.CREATE('div',RMFid(config, "dynamicOnRadioRadioContainer"), RMFclass(config,"RMFdynamicOnRadioRadioContainer","dynamicOnRadioRadioContainer"),{
               onchange:function(){
                 CHANGE();
               }
            }),
            ret.dynamicContainer=_el.CREATE('div',RMFid(config, "dynamicOnRadioDynamicContainer"), RMFclass(config,"RMFdynamicOnRadioDynamicContainer","dynamicOnRadioDynamicContainer"))
         ]); 

         ret.radioFamilyInp=this.radioFamily(config.radioFamilyConfig);
         _el.APPEND(ret.radioContainer, ret.radioFamilyInp.el);
         CHANGE();
      },
      "section"//labelType
   ),
    "dynamicOnSelect":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFdynamicOnSelect",
        dynamicForms:{}, // placeHolder: a text to hold the place in the input
        selectConfig:{}, 
        
      },/// rmfdefault
      {},// rmfspecials
      function(){
         var nam=this.selectInp.COLL();
         var ret={};
         ret[nam]=this.dynamicFormColl.COLL();
         return ret;
      },// COLL
      function(v){
         v=v || {};
         for(var mem in v)
         {
            this.selectInp.SET(mem);
            this.RADCHANGE();
            this.dynamicFormColl.SET(v[mem]);
         }
      },//SET
      function(config,ret){
         config.selectConfig.inps=[];
         config.selectConfig.name=config.name
         config.selectConfig.nameStack=config.nameStack;
         for(var mem in config.dynamicForms)
         {
            config.selectConfig.inps.push({
              labelText:config.dynamicForms[mem].labelText,
              value:mem
            });
         }
         function CHANGE(){
            var fo={};
            ret.dynamicFormColl=new FORM_COL_OB(fo);
            var cat=ret.selectInp.COLL();
            if(cat){
               MAKE(ret.dynamicContainer, config.dynamicForms[cat].form, fo, RMFconcatName(RMFconcatName(config.nameStack,config.name), cat), config.dynamicForms[cat].config || false);
            }else{
               _el.EMPTY(ret.dynamicContainer);
            }
         } 
         ret.RADCHANGE=CHANGE;
         ret.inp=_el.CREATE("div", RMFid(config, "dynamicOnSelect"), RMFclass(config,"RMFdynamicOnSelect","dynamicOnSelect"), {},[
            ret.selectContainer=_el.CREATE('div',RMFid(config, "dynamicOnSelectSelectContainer"), RMFclass(config,"RMFdynamicOnSelectSelectContainer","dynamicOnSelectSelectContainer"),{
               onchange:function(){
                 CHANGE();
               }
            }),
            ret.dynamicContainer=_el.CREATE('div',RMFid(config, "dynamicOnSelectDynamicContainer"), RMFclass(config,"RMFdynamicOnSelectDynamicContainer","dynamicOnSelectDynamicContainer"))
         ]); 

         ret.selectInp=this.select(config.selectConfig);
         _el.APPEND(ret.selectContainer, ret.selectInp.el);
         CHANGE();
      },
      "section"//labelType
   ),
   "dynamicOnSelectFallthrough":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFdynamicOnSelectFallthrough",
        dynamicInps:{},
        selectConfig:{}
        
      },/// rmfdefault
      {},// rmfspecials
      function(){
         var nam=this.selectInp.COLL();
         var ret={};
         if(typeof this.dynamicInpColl.COLL !== "function"){return {};}
         return this.dynamicInpColl.COLL();
         return ret;
      },// COLL
      function(v){
         v=v || {};
         for(var mem in v)
         {
            this.selectInp.SET(mem);
            this.RADCHANGE();
            this.dynamicInpColl.SET(v[mem]);
         }
      },//SET
      function(config,ret){
         config.selectConfig.inps=[];
         config.selectConfig.name=config.name;
         config.selectConfig.nameStack=config.nameStack;
         for(var mem in config.dynamicInps)
         {
            config.selectConfig.inps.push({
              labelText:config.dynamicInps[mem].labelText,
              value:mem
            });
         }
         function CHANGE(){
            _el.EMPTY(ret.dynamicContainer);
            var cat=ret.selectInp.COLL();
            var dynamicInp=config.dynamicInps[cat];
            if(dynamicInp){
               ret.dynamicInpColl=INPTYPES[dynamicInp.inpType](_ob.COMBINE(dynamicInp.config || {} , {name:config.name, formCol:config.formCol, nameStack:config.nameStack}));
               _el.APPEND(ret.dynamicContainer,ret.dynamicInpColl.el);
            }else{
               _el.EMPTY(ret.dynamicContainer);
            }
         } 
         ret.RADCHANGE=CHANGE;
         ret.inp=_el.CREATE("div", RMFid(config, "dynamicOnSelectFallthrough"), RMFclass(config,"RMFdynamicOnSelectFallthrough","dynamicOnSelectFallthrough"), {},[
            ret.selectContainer=_el.CREATE('div',RMFid(config, "dynamicOnSelectFallthroughSelectContainer"), RMFclass(config,"RMFdynamicOnSelectFallthroughSelectContainer","dynamicOnSelectFallthroughSelectContainer"),{
               onchange:function(){
                 CHANGE();
               }
            }),
            ret.dynamicContainer=_el.CREATE('div',RMFid(config, "dynamicOnSelectFallthroughDynamicContainer"), RMFclass(config,"RMFdynamicOnSelectFallthroughDynamicContainer","dynamicOnSelectFallthroughDynamicContainer"))
         ]); 

         ret.selectInp=this.select(config.selectConfig);
         _el.APPEND(ret.selectContainer, ret.selectInp.el);
         CHANGE();
      },
      "section"//labelType
   ),
   "dynamicOnCheckbox":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFdynamicOnCheckbox",
        checkboxConfig:{},
        dynamicForm:[],
        dynamicFormConfig:{}
         
      },/// rmfdefault
      {},// rmfspecials
      function(){
         if(this.checkboxInp.COLL()){
            return this.dynamicFormColl.COLL();
         }return false;
      },// COLL
      function(a){
         if(a){
            this.checkboxInp.SET(true);
            this.REFCHANGE();
            this.dynamicFormColl.SET(a);
         }else{
            this.checkboxInp.SET(false);
            this.REFCHANGE();
         }
      },//SET
      function(config,ret){
        // console.log(config);
         function CHANGE(){
            _el.EMPTY(ret.dynamicContainer);
            var fo={};
            ret.dynamicFormColl=new FORM_COL_OB(fo);
            var cat=ret.checkboxInp.COLL();
            _el.EMPTY(ret.dynamicContainer);
            if(cat){
               MAKE(ret.dynamicContainer, config.dynamicForm, fo, RMFconcatName(config.nameStack,config.name), config.dynamicFormConfig || false);
            }
         }
         ret.REFCHANGE=CHANGE;
         ret.inp=_el.CREATE("div", RMFid(config, "dynamicOnCheckbox"), RMFclass(config,"RMFdynamicOnCheckbox","dynamicOnCheckbox"), {}); 
         ret.checkboxInp=this.checkbox(_ob.COMBINE(config.checkboxConfig,{name:config.name,nameStack:config.nameStack, formCol:config.formCol}));
         ret.checkboxInp.inp.onchange=function(){CHANGE();}
         _el.APPEND(ret.inp, [
            ret.checkboxInp.el,
            ret.dynamicContainer=_el.CREATE('div',RMFid(config, "dynamicOnCheckboxDynamicContainer"), RMFclass(config,"RMFdynamicOnCheckboxDynamicContainer","dynamicOnCheckboxDynamicContainer"),{})
         ]);
         CHANGE();
      },
      "section"//labelType
   ),
   "dynamicOnCheckboxFallthrough":RMFbasicInput(
      {
        /*COMES WITH THESE BY DEFAULT*/
        /*
          name:name for Input
            id: id for input ("")
            class:class for input("")
            default: default setting ("")
            labelText: text for label ("")
            labelSequence: whether the label text should appear before or after the input (true)
            errorText: text for error ("")
            errorSequence: whether the error text should appear before or after the input (false)
        */
        classRunner:"RMFdynamicOnCheckboxFallthrough",
        checkboxConfig:{},
        inpType:"singleLine",
        inpTypeConfig:{}
         
      },/// rmfdefault
      {},// rmfspecials
      function(){
         if(this.checkboxInp.COLL()){
           if(this.dynamicInp.COLL){
            return this.dynamicInp.COLL();
           }
         }return false;
      },// COLL
      function(a){
         if(a){
            this.checkboxInp.SET(true);
            this.REFCHANGE();
            this.dynamicInp.SET(a);
         }else{
            this.checkboxInp.SET(false);
            this.REFCHANGE();
         }
      },//SET
      function(config,ret){
         //console.log("cbf beg ", config);
         config.inpTypeConfig.formCol=config.formCol;
         config.inpTypeConfig.name=config.inpTypeConfig.name || config.name;
         config.inpTypeConfig.nameStack=config.nameStack;
         function CHANGE(){
            _el.EMPTY(ret.dynamicContainer);
            var cat=ret.checkboxInp.COLL();
            _el.EMPTY(ret.dynamicContainer);
            ret.dynamicInp=false;
            if(cat){
               //console.log("from checkbox fallthrough ", config.inpTypeConfig, config.inpType);
               ret.dynamicInp=INPTYPES[config.inpType](config.inpTypeConfig);
               _el.APPEND(ret.dynamicContainer, ret.dynamicInp.el);
            }
         }
         ret.REFCHANGE=CHANGE;
         ret.inp=_el.CREATE("div", RMFid(config, "dynamicOnCheckboxFallthrough"), RMFclass(config,"RMFdynamicOnCheckboxFallthrough","dynamicOnCheckboxFallthrough"), {}); 
         ret.checkboxInp=this.checkbox(_ob.COMBINE(config.checkboxConfig,{name:config.name,nameStack:config.nameStack, formCol:config.formCol}));
         ret.checkboxInp.inp.onchange=function(){CHANGE();}
         _el.APPEND(ret.inp, [
            ret.checkboxInp.el,
            ret.dynamicContainer=_el.CREATE('div',RMFid(config, "dynamicOnCheckboxFallthroughDynamicContainer"), RMFclass(config,"RMFdynamicOnCheckboxFallthroughDynamicContainer","dynamicOnCheckboxFallthroughDynamicContainer"),{})
         ]);
         CHANGE();
      },
      "section"//labelType
   ),
   "button":function(config){
      /*config
          text: text to be in button
          action: function to fire on button press
          class:
          id:
      */
      var ret={
         el:_el.CREATE('input',RMFid(config, ""), RMFclass(config,"RMFbutton","button"),{
            type:'button',
            onclick:function(e){config.action(this, e);},
            value:config.text
         },[]),
         action:config.action
      };
      return ret;
   },
   "hidden":function(config){
      /*
          value:,
          name:
          class:
          id
      */
       config=config || {};
       
       return {
          el:_el.CREATE('input',RMFid(config, ""), RMFclass(config,"RMFhidden","'hidden"),{name:config.name, type:"hidden", value:config.value}),
          COLL:function(){return config.value;},
          SET:function(a){config.value=a;}
       };
   },
   "dummy":function(config){
      return _ob.COMBINE({
         
          el:_el.CREATE('input',RMFid(config, ""), RMFclass(config,"RMFhidden","'hidden"),{name:config.name, type:"hidden", value:config.value}),
      },config);
   },
   "hider":function(config){
      config=config || {};
      function OPEN(){
          STATE=1;
          ret.labelTextBox.innerHTML=config.labelText+" ";
          ret.inp.className=ret.inp.className.replace(/RMFhiderClosed/g).trim();
          _el.APPEND(ret.labelTextBox, _el.CREATE('input','','RMFhiderButton',{type:"button",value:"^"}));
      };
      function CLOSE(){
         STATE=0;
         ret.labelTextBox.innerHTML=config.labelText+" ";
         _el.APPEND(ret.labelTextBox, _el.CREATE('input',"","RMFhiderButton",{type:"button", value:"V"}));
         ret.inp.className+=" RMFhiderClosed";
      };
      var STATE=0;
      function TOGGLE(){
         if(STATE){
            return CLOSE();
         }return OPEN();
      }
      
      var ret=this.section(config);

      
      ret.labelTextBox.onclick=function(){TOGGLE();}
      ret.labelTextBox.className+=" RMFhiderLabel";
      CLOSE();

      return ret;
   },
   "compoundHider":function(config){
      config=config || {};
      function OPEN(){
          STATE=1;
          ret.labelTextBox.innerHTML=config.labelText+" ";
          ret.inp.className=ret.inp.className.replace(/RMFhiderClosed/g).trim();
          _el.APPEND(ret.labelTextBox, _el.CREATE('input','','RMFhiderButton',{type:"button",value:"^"}));
      };
      function CLOSE(){
         STATE=0;
         ret.labelTextBox.innerHTML=config.labelText+" ";
         _el.APPEND(ret.labelTextBox, _el.CREATE('input',"","RMFhiderButton",{type:"button", value:"V"}));
         ret.inp.className+=" RMFhiderClosed";
      };
      var STATE=0;
      function TOGGLE(){
         if(STATE){
            return CLOSE();
         }return OPEN();
      }
      
      var ret=this.compound(config);

      
      ret.labelTextBox.onclick=function(){TOGGLE();}
      ret.labelTextBox.className+=" RMFhiderLabel";
      CLOSE();

      return ret;
   },
   "sectionHider":function(config){
      config=config || {};
      function OPEN(){
          STATE=1;
          ret.labelTextBox.innerHTML=config.labelText+" ";
          ret.inp.className=ret.inp.className.replace(/RMFhiderClosed/g).trim();
          _el.APPEND(ret.labelTextBox, _el.CREATE('input','','RMFhiderButton',{type:"button",value:"^"}));
      };
      function CLOSE(){
         STATE=0;
         ret.labelTextBox.innerHTML=config.labelText+" ";
         _el.APPEND(ret.labelTextBox, _el.CREATE('input',"","RMFhiderButton",{type:"button", value:"V"}));
         ret.inp.className+=" RMFhiderClosed";
      };
      var STATE=0;
      function TOGGLE(){
         if(STATE){
            return CLOSE();
         }return OPEN();
      }
      
      var ret=this.section(config);

      
      ret.labelTextBox.onclick=function(e){e.preventDefault(); e.cancelBubble=true;TOGGLE();}
      ret.labelTextBox.className+=" RMFhiderLabel";
      CLOSE();

      return ret;
   }
};

INPTYPES_inpLists={
    'TBL_jipper':[
        {
           'type':'singleLine',
            name:'yo',
            labelText:'YYou'
        }
    ]
};
INPTYPES.TBL_jipper= RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_jipper, '');


function MODAL_NOW(){
   var ret={
       CLOSE:function(){
          _el.REMOVE(this.parent);
       }
   };
   ret.parent=_el.CREATE("div","","basicModalParent",{},[
      ret.backer=_el.CREATE("div","","basicModalBacker",{},[]),
      ret.client=_el.CREATE("div","","basicModalClient",{},[]),
      ret.closer=_el.CREATE('div','','basicModalCloser',{
        onclick:function(){ret.CLOSE();}
      },[_el.TEXT('X')])
   ]);
   _el.APPEND(el_body, ret.parent);
   return ret;
}

function TableSearchAdd(inpRet,config,forEdit){
   var mod=MODAL_NOW();
   var catcher;
   var dd;
   if(config.addApName){
      dd=new dFCM('RMF/'+config.typeName+'/action.php?action='+config.addApName, {method:'POST', headers:{'Content-Type':'special/obPost'}});
   }else{
      dd=new dFCM(config.addFile || 'php_core/globalAdd.php?typeName='+config.typeName, {method:'POST', headers:{'Content-Type':'special/obPost'}});
   }
   var inpL=[];
   if(config.inpList){
      inpL=config.inpList;
   }else if(config.addApName){
       inpL=INPTYPES_inpLists[config.typeName+config.addApName];
   }else{
      inpL=INPTYPES_inpLists[config.typeName];
   }
    var FO=RMFORM(
     mod.client,
     inpL,
     config.typeName+(config.addApName || 'add'),
     {
        ajaxDacm:dd,
        ajaxProc:function(res){
           _el.EMPTY(catcher);
           if(res === "SUCCESS"){
                 
              
              var temp=CARDTYPES.GET(config.cardName || config.typeName, FO.COLL(), 2);
              temp.className+=' tableAddResult';

              temp.onclick=function(){
                 inpRet.SET(FO.COLL());
                 mod.CLOSE();
              }
              _el.APPEND(catcher,temp);
           }else{
              _el.APPEND(catcher, _el.TEXT(res));
           }

           
        }
     }
   );
   _el.APPEND(mod.client,
      catcher=_el.CREATE("div","",'',{},[
         
      ])
   );
}

function TableSearchSearch(inpRet, config, forEdit){
   var mod = MODAL_NOW();
   var catcher;
   var dd;
   if(config.apName){
      dd=new dFCM('RMF/'+config.typeName+'/action.php?action='+config.apName, {method:'POST', headers:{'Content-Type':'special/obPost'}});
   }else{
      dd=new dFCM(config.searchFile || 'php_core/globalSearch.php?typeName='+config.typeName, {method:'POST', headers:{'Content-Type':'special/obPost'}});
   }
   var inpL=[];
   if(config.inpList){
      inpL=config.inpList;
   }else if(config.apName){
       inpL=INPTYPES_inpLists[config.typeName+config.apName];
   }else{
      inpL=INPTYPES_inpLists[config.typeName];
   }
   RMFORM(
     mod.client,
     inpL,
     config.typeName+(config.apName || 'search'),
     {
        ajaxDacm:dd,
        ajaxProc:function(res){
           _el.EMPTY(catcher);
           res=JSON.parse(res);
           
           for(var i=0; i<res.length; i++)
           {
              var temp=CARDTYPES.GET(config.cardName || config.typeName, res[i], 2);
              temp.className+=' tableSearchResult';
              temp.DATA_res=res[i];
              temp.onclick=function(){
                 inpRet.SET(this.DATA_res);
                 mod.CLOSE();
              }
              _el.APPEND(catcher,temp);
           }

           
        }
     }
   );
   _el.APPEND(mod.client,
      catcher=_el.CREATE("div","",'',{},[
         
      ])
   );
}
function TableSearchAp(apName, inpRet, config){
   var mod = MODAL_NOW();
   var catcher;
   var dd;
   var FO=RMF_actionProcedureForm(apName, config.typeName,mod.client, "mod"+config.typeName+apName, {
      ajaxProc:function(res){
         if(res === "SUCCESS"){
            alert("success");
            inpRet.SET(FO.COLL());
            mod.CLOSE();
         }else{
             var tRes;
             try{
               tRes=JSON.parse(res);
               inpRet.SET(res);
               mod.CLOSE();
             }catch(e){
               _el.EMPTY(catcher); 
               _el.APPEND(catcher, _el.TEXT(res));
             }
         }
      }
   });
  
   _el.APPEND(mod.client,
      catcher=_el.CREATE("div","",'',{},[
         
      ])
   );
}
INPTYPES.tableSearch=function(config){
   var ret;
   if(config.inps){
      ret=this.compound(_ob.COMBINE(config,{
         class:'tableSearch'
      }));
   }else{
      ret= this[config.typeName](_ob.COMBINE(config,{class:'tableSearch'}));
   }
   ret.el.insertBefore(_el.CREATE('input','','',{type:'button', value:'Search', onclick:function(){
      TableSearchSearch(ret,config);
   }}), ret.el.children[0]);

   if(config.includeAdd){
      ret.el.insertBefore(_el.CREATE('input','','',{type:'button', value:'Add', onclick:function(){
         TableSearchAdd(ret,config);
      }}), ret.el.children[0]);
   }

   if(config.apButtons){
      config.apButtons.forEach(function(a){
         ret.el.insertBefore(_el.CREATE('input','','',{type:'button',value:'add', onclick:function(){
            TableSearchAp(a, ret,config);
         }}),ret.el.children[0])
      });
   }
   ret.oldCOLL=ret.COLL;
   ret.COLL=function(){
	   var r=this.oldCOLL();
	   var found=false;
	   for(var mem in r)
	   {
		   if(typeof r[mem] !== 'boolean' && r[mem]){found=true; break;}
	   }
	   if(!found){return {};}
	   return r;
   }
   return ret;
}

INPTYPES.tableSearchForEdit=function(config){   
   var ret;
   /*if(config.inps){
      ret=this.compound(_ob.COMBINE(config,{
         class:'tableSearch'
      }));
   }else{
      ret= this[config.typeName](_ob.COMBINE(config,{class:'tableSearch'}));
   }
   ret.el.insertBefore(_el.CREATE('input','','',{type:'button', value:'Search', onclick:function(){
      TableSearchSearch(ret,config,true);
   }}), ret.el.children[0]);*/
   ret=this.tableSearch(config);
   ret.TABLESEARCHFOREDITOLDSET=ret.SET;
   ret.SET=function(v){
      if(v){
        v.OGvalue=_ob.CLONE(v);
      }
      ret.TABLESEARCHFOREDITOLDSET(v);
   }
   return ret;
   
}
INPTYPES.tableEditBasic=function(config){
   var ret=this.section(config);
   /*ret.TABLEEDITBASICSET=ret.SET;
   ret.SET=function(v){
      if(v){
         v.OGvalue=_ob.CLONE(v);
      }
      this.TABLEEDITBASICSET(v);
   }*/
   
   return ret;
}

var INPTYPEOVERRIDE={
 
};

for(var mem in INPTYPEOVERRIDE)
{
   INPTYPES[mem]=INPTYPEOVERRIDE[mem];
}
function RMFgetCard(config,level){
   return CARDTYPES.GET(config.dataType || "", config.data || config.labelText || config.text || "", level || 0);
}

var CARDTYPES={
   GET:function(type, data, level){
      if(this[type]){
         return this[type](data, level);
      }return this.BASIC(data,level);
   },
   BASIC:function(data, level){
      //alert("here"+data)
      var txt;
      if(typeof data !== "object"){
         txt= _el.TEXT(data);
      }else{
         txt= _el.TEXT(''+JSON.stringify(data));
      }
      return _el.CREATE('span','','cardBasic',{},[txt]);
   },
   CURRY:function(type){
     var t=this;
     return function(data, level){
        return t.GET(type, data, level);
     }
   }
}

function RMFgetValue(config){
   if(config.data && config.dataType){
      return VALUETYPES.GET(config.dataType, config.data);
   }return config.value || "";
}

var VALUETYPES={
   GET:function(type, data){
      if(this[type]){
         return this[type](data);
      }return this.BASIC(data);
   },
   BASIC:function(data){
     if(typeof data === "object"){
        if(data.pk){
           return data.pk;
        }return JSON.stringify(data);
     }return ''+data;
   }
}

var RMF_makeTypeStack=[];
function MAKE(target, inps, formCol, nameStack, inpsConfig){
   nameStack=nameStack || "";
   inpsConfig= inpsConfig || {};
   var RMF_typeStackLength=RMF_makeTypeStack.length;
  // alert(nameStack+" "+JSON.stringify(inpsConfig));
   _el.EMPTY(target);
   for(var i=0; i<inps.length; i++)
   {
      RMF_makeTypeStack.splice(RMF_typeStackLength+1);
      //console.log(inps[i].type);
      var tp;
      if(['tableSearch', 'tableSearchForEdit'].indexOf(inps[i].type)> -1){
         tp=inps[i].typeName;
      }else{
         tp=inps[i].type;
      }
      if(tp.match(/^TBL_/) && RMF_makeTypeStack.indexOf(tp) > -1){
         continue;
      }
      RMF_makeTypeStack[RMF_typeStackLength]=tp;
      

      inps[i].nameStack=nameStack;
      inps[i].formCol=formCol;
     // alert(inps[i].name+": "+JSON.stringify(inpsConfig[inps[i].name]));
      var temp=INPTYPES[inps[i].type](_ob.COMBINE(inps[i], inpsConfig[inps[i].name] || {}));
      if(temp.COLL){
         formCol[inps[i].name]=temp;
      }
      _el.APPEND(target, temp.el);
   }
   RMF_makeTypeStack.splice(RMF_typeStackLength);
}

function RMF_fcCOLL(){
     var col = {};
         for(var mem in this)
         {
             if(this[mem]  && this[mem].COLL){
                col[mem]=this[mem].COLL();
             }
         }
         return col;
}
function RMF_fcSET(v){
   v= v || {};
   
   for(var mem in this)
   {
      if(v[mem] && this[mem]  && this[mem].SET){
         this[mem].SET(v[mem]);
      }
   }
   
}
function FORM_COL_OB(formCol){
   this.formCol=formCol;
   this.formCol.SET=RMF_fcSET;
   this.formCol.COLL=RMF_fcCOLL;
   this.formCol.IS_subFColl=true;
}
FORM_COL_OB.prototype.COLL=function(){
   
         var col={};
         for(var mem in this.formCol)
         {
             if(this.formCol[mem] &&  this.formCol[mem].COLL){
                col[mem]=this.formCol[mem].COLL();
             }
         }
         return col;
}
FORM_COL_OB.prototype.SET=function(v){
   v= v || {};
   
   for(var mem in this.formCol)
   {
	   /* this typeof undefined check could break things later that 
	   depend on this library. The check used to just be for if v[mem] was falsey
	   but empty strings and boolean false for checkboxes failed and integer 0. As well as the integer zero.
	   We will see what happens. 
	   
	   This check here is more what was desired. If nothing exists do not call SET. 
	   
	   If something breaks, we will need to make a splinter for the site generator. This check is not acceptable for the site generator, because of all of the checkboxes.
	   
	   */
      if(typeof v[mem] !== "undefined" && v[mem] !== null && this.formCol[mem]  && this.formCol[mem].SET){
         this.formCol[mem].SET(v[mem]);
      }
   }
}
FORM_COL_OB.prototype.SETforEdit=function(v){
   v=v || {};
   v.OGvalue=_ob.CLONE(v);
   this.SET(v);
}
FORM_COL_OB.prototype.SUBMIT=function(e){
   e=e || new Event("submit");
   this.form.onsubmit.call(this.form,e);
}
function RMFORM(target, inps, name, config){
   name=name || "defaultName";
   config=config || {};

   config.method=config.method || "POST";
   config.action=config.action || "";
   config.ajaxAction=config.ajaxAction || "";
   config.ajaxMethod=config.ajaxMethod || "POST";
   config.ajaxProc=config.ajaxProc || DUMMY_FUNCT;
   config.useModal=config.useModal || false;
   config.ajaxDacm=config.ajaxDacm || false;
   config.header=config.header || "";
   config.headerLevel=config.headerLevel || 1;
   config.submitFilter=config.submitFilter || function(a){return a;}

   var lockout=false;
   var formCol={};
   var ret=new FORM_COL_OB(formCol);

   _el.APPEND(target,[
      ret.form=_el.CREATE("form", "FORM-"+name,"",{
         action:config.action,
         method:config.method
      })
   ]);

   if(config.header){
      inps=_ob.CLONE(inps);
      inps.unshift({
        type:"header",
        text:config.header,
        level:config.headerLevel
      });
   }
   //alert("HHHHHH "+JSON.stringify(inps)+" .... "+JSON.stringify(config.inpsConfig));
   MAKE(ret.form, inps, formCol, name, config.inpsConfig);

   var osFunct="";
   
   if(config.ajaxAction || config.ajaxDacm){
     osFunct=function(e){
        e.preventDefault(); e.cancelBubble=true;
        var target;
        var dd;
        if(config.localProc){
           return localProc(ret.COLL());
           
        }

        if(config.ajaxDacm){
           dd=config.ajaxDacm;
        }else{
			
           dd=new dFCM(config.ajaxAction, {method:'POST', useFormData:true});
        }
        if(lockout){return;}
        if(config.useModal && dd){
            var modStr="Talking to "+dd.file+"... ";
            
            var modalHolder=RMF_MODAL(modStr);
            target=modalHolder.ticker;
        }else{
           target=this.parentNode;
        }
        dd.CAPTURE(config.viewController || VCR.main, target);
        lockout=true;
        dd.CALL_data(function(res){
      //      alert("sent");
         //  alert("from send: "+res);
           lockout=false;
           config.ajaxProc(res);
           if(config.useModal){
              modalHolder.CLOSE();
           }
        },{dat:config.submitFilter(ret.COLL())});
       // alert(JSON.stringify(ret.COLL()));
       
     }
   }

   if(config.collProc){
      ret.collProc=config.collProc;
      osFunct=function(e){
        e.preventDefault(); e.cancelBubble=true;
        config.collProc(ret.COLL());
      }
   }

   ret.form.onsubmit=osFunct;
   _el.APPEND(ret.form, _el.CREATE('button','','rmfSubmitButton',{},['Submit']));
   
   return ret;

}
var RMF_MODAL=function(text){
   
   var ret={
      CLOSE:function(){ _el.REMOVE(this.wrapper);},
      APPEND:function(v){_el.APPEND(this.appendage, v)}
   };

    ret.wrapper=_el.CREATE('div','','RMF_modalWrapper',{},[
       ret.backer=_el.CREATE('div','','RMF_modalBacker'),
       ret.client=_el.CREATE('div','','RMF_modalClient',{},[
          ret.ticker=_el.CREATE('div','','RMF_modalTicker'),
          ret.appendage=_el.CREATE('div','','RMF_modalAppendage')
       ])
    ]);
    ret.APPEND(_el.TEXT(text));
   _el.APPEND(el_body, ret.wrapper);
   return ret;
}
// functions that call the FORM function with certain configurations

function RMF_typeForm(typeName,target, name, config){
   return RMFORM(target, name, INPTYPES[typeName], config);
}

function RMF_actionProcedureForm(action, typeName,target, name, config){
   var dd=new dFCM("/RMF/"+typeName+"/action.php?action="+action, {method:'POST', headers:{'Content-Type':'special/obPost'}});
   
   config.ajaxDacm=dd;
 
   return RMFORM(target, INPTYPES_inpLists[typeName+action],name,config);
}


function RMF_nameMap(src, mapper){
   mapper=mapper || {};
   var ret=[];
   src.forEach(function(s){
      if(!mapper[s.name]){
         ret.push(s);
      }else{
         ret.push(_ob.COMBINE(s, mapper[s.name]));
      }
   });
   return ret;
}
function RMF_reorder(sourceInpList, nameList, emptyIsAll){
   var ret=[];
   var ind;
   var app=[];

   if(emptyIsAll && !nameList.length){return sourceInpList;}
   sourceInpList.forEach(function(inp){
      if((ind=nameList.indexOf(inp.name)) > -1){
         ret[ind]=inp;
      }else{
         app.push({name:inp.name, type:'hidden', default:inp.default});
      }
   });
   ret.push(...app);
   return ret;
}
function BasicModal(){
   var client, closer, wrapper, backer;
   function CLOSE(){
      _el.REMOVE(wrapper);
   }
   wrapper=_el.CREATE('div','','basicModalWrapper',{},[
      backer=_el.CREATE('div','','basicModalBacker'),
      client=_el.CREATE('div','','basicModalClient'),
      closer=_el.CREATE('div','','basicModalCloser',{onclick:CLOSE})
   ]);
   _el.APPEND(document.body, wrapper);
   return {
      wrapper:wrapper,
      client:client,
      closer:closer,
      backer:backer,
      CLOSE:CLOSE
   };
}
SoftNotification={
   Render:function(body, fadeOutDur){
      fadeOutDur=fadeOutDur || 1000;
      var r;
      _el.APPEND(document.body, r=_el.CREATE('div','','SoftNotification-Wrapper',{},[
         _el.CREATE('div','','SoftNotification-ActionWrapper',{},[_el.CREATE('button','','',{onclick:function(){_el.REMOVE(this.parentNode.parentNode);}},["X"])]),
         _el.CREATE('div','','SoftNotification-BodyWrapper',{},body)
      ]));
      r.style.opacity='0';
      setTimeout(function(){
         r.style.opacity='1';
         if(fadeOutDur === -1){return;}
         setTimeout(function(){
            r.style.opacity="0";
            setTimeout(function(){_el.REMOVE(r);},501);
         },fadeOutDur+501);
      },1);
   }
};
function VC(targetFunct, insertOb, config){
	this.currentView=0;
	this.previousView=0;
	this.nextView=0;
	
	this.views=[];
	
	
        this.indexMap={};
        this.safeMap={};

	if(targetFunct){
		this.targetFunct=targetFunct;
	}

	
        this.active=false;
	this.config=config || {};
	this.activeConfig=this.config;
	this.onchange=[];
	this.afterchange=[];
	this.onrelease=[];
	this.onlaunch=[];
	
	this.historyChange=null;
	this.captured=false;
	this.capParent=null;
	this.capTargetFunct=null;
	this.capConfig=null;
        this.capChildren=[];

        this.reg_elements=[];
        this.reg_timeouts=[];
        this.reg_intervals=[];
		this.reg_goodObjects=[];
		
        if(insertOb){
                for(var mem in insertOb)
                {
                   if(typeof this[mem] !== "undefined"){
                      throw new TypeError("The member "+mem+" already exists in the view controller");
                   }
                   this[mem]=insertOb[mem];
                }
	}
}
VC.prototype.is_VC=true;
VC.prototype.targetFunct=function(){
	return document.body;
}
VC.prototype.GET_viewList=function(){
   return Object.values(this.indexMap);
},
VC.prototype.GET_target=function(emptyTarget){
	var ret;
	if(this.captured && this.capTargetFunct){
		ret=this.capTargetFunct();
	}else{
		ret=this.targetFunct();
	}
	if(emptyTarget){
		_el.EMPTY(ret);
	}
	return ret;
}
VC.prototype.GET_viewName=function(){
    return this.indexMap[this.safeMap[this.currentView]];
}
VC.prototype.REGISTER_viewData=function(dat){
   var nm=this.GET_viewName();
   this[nm].viewData=dat;
   var sv=this[nm];
   this.REGISTER_changeANDrelease(function(){sv.viewData={};});
   
}
VC.prototype.PUSH_viewData=function(dat){
   this.stagedViewData=dat;
}
VC.prototype.GET_viewData=function(){
   return this[this.GET_viewName()].viewData;
}
VC.prototype.REGISTER_view=function(name, f, insertOb, config){
        if(typeof this[name] !== "undefined"){throw new TypeError('Name already exists on this view controller: '+name);}
	this.views.push(f);
        if(insertOb && !insertOb.viewData){insertOb.viewData={};}
	this[name]=insertOb || {viewData:{}};
         var i=this.views.length-1;
         this.safeMap[name]=i; this.safeMap[i]=i;
         this.indexMap[i]=name;
	this.config[name]=config || {};
}
VC.prototype.REGISTER_changeANDrelease=function(f){
        this.onrelease.push(f);this.onchange.push(f);
}
VC.prototype.REGISTER_release=function(f){
   this.onrelease.push(f);
}
VC.prototype.REGISTER_goodObject=function(o){
	this.reg_goodObjects.push(o);
	return o;
}
VC.prototype.REGISTER_element=function(e){
    this.reg_elements.push(e);
    return e;
}
VC.prototype.REGISTER_timeout=function(t){
    this.reg_timeouts.push(t);
    return t;
}
VC.prototype.REGISTER_interval=function(i){
    this.reg_intervals.push(i);
    return i;
}
VC.prototype.CLEANUP=function(){
    while(this.reg_elements.length){
           _el.REMOVE(this.reg_elements.pop());
        }
        while(this.reg_timeouts.length){
           clearTimeout(this.reg_timeouts.pop());
        }
        while(this.reg_intervals.length){
           clearInterval(this.reg_intervals.pop());
        }
		while(this.reg_goodObjects.length){
			var r=this.reg_goodObjects.pop().good=false;
			if(r.target){_el.REMOVE(r.target);}
		}
        while(this.capChildren.length)
        {this.capChildren.pop().RELEASE();}
}
VC.prototype.CHANGE=function(v, dat, f, config){
        VC.prototype.VCR_depth++;
	switch(typeof v){
            case "string":
            case "number":
               break;
             default:
                v=this.stagedView || this.currentView;
                this.stagedView='';
                break;
        }
        this.CLEANUP();
        var arr, arr2;
	if(this.views.length){
                v=this.safeMap[v];
                this.previousView=this.currentView;
		this.currentView=v;
		


                this.active=true;
                var lgger;
                if(
                   !this.config.noLog 
                   && (!config || config && !config.noLog) 
                   && (!this.config.noLogByView || !this.config.noLogByView[v])
                   && this.VCR_depth === 1
                ){
                   lgger=this.LOG_change;
                }
                VC.prototype.VCR_depth--;

                if(this.stagedViewData){
                   dat=this.stagedViewData; this.stagedViewData=null;
                }

		_fun.RunQue([
                   _fun.curryArgs(_fun.RunQue, [this.onchange]),
                   _fun.curryScope(function(){if(dat){this.REGISTER_viewData(dat);}}, this),
                   _fun.curryArgs(this.views[v],[this]),
                   _fun.curryArgs(_fun.RunQue, [this.afterchange]),
                   f || DUMMY_FUNCT, 
                   _fun.curryScope(lgger || DUMMY_FUNCT,this)
                ]);
                this.historyChange=null;
	}
}
VC.prototype.VCR_depth=0;
VC.prototype.LAUNCH=function(v, changeLabel, f, config){
	_fun.RunQue([
		_fun.curryArgs(_fun.RunQue, [this.onlaunch, true]),
		_fun.curryScopeArgs(this.CHANGE, this, [v,changeLabel,f,config])
	]);
}
VC.prototype.CAPTURE=function(par, tar, lab, conf){
	if(par && par.is_VC){
                par.capChildren.push(this);
		this.captured=true;
		this.capParent=par;
		this.capTargetFunct=tar;
		this.capLabelFunct=lab;
		this.capConfig=_ob.COMBINE(this.config, conf);
		this.activeConfig=this.capConfig;
	}else{
		throw new TypeError("par was not a view controler...", par);
	}
}

VC.prototype.RELEASE=function(a){
        this.active=false;
	this.captured=false;
	this.capParent=undefined;
	this.capTargetFunct=undefined;
	this.capConfig=undefined;
	this.activeConfig=this.config;
        this.CLEANUP();        
	_fun.RunQue(this.onrelease);
        _fun.RunQue(this.onchange);
        if(this.config.resetViewOnRelease){
			if(this.historyChange === true){
				this.historyChange=null;
			}else{
				this.currentView=0;
			}
        }
}
VC.prototype.INCR=function(){
    this.CHANGE((this.currentView+1)%this.views.length);
}
VC.prototype.DECR=function(){
    var c=this.currentView-1; 
    if(c<0){c=this.views.length-1;}
    this.CHANGE(c);
}
VC.prototype.HAS_view=function(str){
    return (Object.values(this.safeMap).indexOf(str) >= 0);
}

var VCR={};

var VC_viewData={home:{
		funct:function(a){
			var tar=a.GET_target(true);
			var headers={"":[]};
			for(var mem in VC_viewData)
			{
				if(!VC_viewData[mem].homeButtonText){continue;}
				var headerHol=VC_viewData[mem].homeHeader || "";
				var e=_el.CREATE("div","","mainNavButtons",{DATA_mem:mem,onclick:function(){VCR.main.CHANGE(this.DATA_mem);}},[VC_viewData[mem].homeButtonText]);
				if(headerHol){
					headers[headerHol]=headers[headerHol] || [];
				
					headers[headerHol].push(e);
				}else{
					_el.APPEND(tar, e);
				}
			}
			for(var mem in headers)
			{
				_el.APPEND(tar, [
					_el.CREATE("h3","","",{},[mem]),
					...headers[mem]
				]);
			}
		},
		title:"Demo Greg Goad Dot Net Admin Console",
		urlEndpoint:""
	},contactForms:{
	funct:function(a){
		var cform='', category='';
		var formInputDetail={};
		function ParseDetailList(inpDetail, dat){
			var imgCatcher, paraCatcher, textCatcher;
			var imgFound=false;
			var ret=_el.CREATE('div','','ContactForm-Display',{},[
				textCatcher=_el.CREATE('div','','',{},[]),
				paraCatcher=_el.CREATE('div','','',{},[])
			]);
			imgCatcher=_el.CREATE('details','','ContactForm-Display-ImageCatcher',{},[
				
				_el.CREATE('summary','','',{},["Images"]),
				
			]);
			
			// text, paragraph, select, image, imageMulti
			var data=dat.dat;
			var validImgs=['jpg','jpeg','png','webp'];
			inpDetail.forEach(function(i){
				
				if(i.type === 'text' || i.type === 'select'){
					var butCat;
					_el.APPEND(textCatcher, [
				_el.CREATE('span','','ContactForm-Display-SingleLine',{},[_el.CREATE('span','','ContactForm-Display-SingleLabel',{},[i.labelText]),': ',_el.CREATE('span','','ContactForm-Display-SingleValue',{},[data[i.name]]), butCat=_el.CREATE('span','','ContactForm-Display-ActionWrapper',{},[_el.CREATE('button','','ContactForm-Display-ActionButton',{onclick:function(){navigator.clipboard.writeText(data[i.name]);SoftNotification.Render('"'+data[i.name]+'" copied to the clipbaord.');}},['Copy'])])]),
						_el.CREATE('br')
					]);
					if(i.name === 'tel'){
						_el.APPEND(butCat,_el.CREATE('a','','',{href:'tel:'+data[i.name], target:'_BLANK'},[_el.CREATE('button','','ContactForm-Display-ActionButton',{},["Call"])]));
					}else if(i.name === 'email'){
						_el.APPEND(butCat, _el.CREATE('a','','',{href:'mailto:'+data[i.name], target:'_BLANK'},[_el.CREATE('button','','ContactForm-Display-ActionButton',{},["Email"])]));
					}
				}else if(i.type === 'paragraph'){
					_el.APPEND(paraCatcher,[
						_el.CREATE('details','','ContactForm-Display-Paragraph',{},[
							_el.CREATE('summary','','',{},[i.labelText]),
							_el.CREATE('pre','','',{},[data[i.name]]),
						]),
						_el.CREATE('br')
					]);
				}else if(i.type === 'image' || i.type === 'imageMulti'){
					imgFound=true;
					_el.APPEND(imgCatcher, [
						_el.CREATE('details','','ContactForm-Display-ImageDetailsWrapper',{},[
							_el.CREATE('summary','','',{},[i.labelText]),
							...data[i.name].map(function(im){
								return _el.CREATE('div','','ContactForm-Display-ImageWrapper',{},[
									_el.CREATE('img','','ContactForm-Display-Image',{src:'/adminTest/apires/contactForms/getImage.php?sub='+dat.pk+'&pic='+im+'&formName='+cform}),
									_el.CREATE('div','','ContactForm-Display-ImageCommandWrapper',{},[
										_el.CREATE('span','','',{},["type: "+im.split('.').pop()]),
										((validImgs.indexOf(im.split('.').pop()) > -1) ? _el.CREATE('button','','ContactForm-Display-ImageCommand',{onclick:function(){
											var mod=BasicModal();
											_el.APPEND(mod.client, _el.CREATE('img','','ContactForm-Display-ImageLarge',{src:'/adminTest/apires/contactForms/getImage.php?sub='+dat.pk+'&pic='+im+'&formName='+cform}));
											
										}},["View Larger"]) : ''),
										_el.CREATE('a','','ContactForm-Display-ImageCommand',{href:'/adminTest/apires/contactForms/downloadImage.php?sub='+dat.pk+'&pic='+im+'&formName='+cform, attributes:{download:''}},[
											_el.CREATE('button','','',{},["Download"])
										])
									])
								]);
								
								
							})
						])
					])
				}
			});
			
			//check for images_
			if(imgFound){
				_el.APPEND(ret, imgCatcher);
				
			}
			
			return ret;
		}
		function ListMember(d, arch){
			var but;
			if(arch){
				but=_el.CREATE('button','','',{
							onclick:function(){
								_el.EMPTY(notificationCat);
								var fd=new FormData();
								fd.append('subPk', d.pk);
								ElFetch(notificationCat,_el.CREATE('div','','',{},["Re Opening Submission"]),'/adminTest/apires/contactForms/reopenSubmission.php', {method:"POST", body:fd}, "text",{
									success:function(res){;
										_el.EMPTY(notificationCat);
										_el.REMOVE(notificationCat.parentNode);
										SoftNotification.Render("Reopen Success");
									},
									fail:function(){
										_el.EMPTY(notificationCat);
										_el.APPEND(notificationCat, [
											"Failed to reopen: try again later. ",
											_el.CREATE('button','','',{onclick:function(){_el.EMPTY(notificationCat);}},['Dismiss']),
											" "
										]);
									}
								});
							}
						},["Re-Open"]);
			}else{
				but=_el.CREATE('button','','',{
							onclick:function(){
								_el.EMPTY(notificationCat);
								var fd=new FormData();
								fd.append('subPk', d.pk);
								ElFetch(notificationCat,_el.CREATE('div','','',{},["Archiving Submission"]),'/adminTest/apires/contactForms/archiveSubmission.php', {method:"POST", body:fd}, "text",{
									success:function(res){;
										_el.EMPTY(notificationCat);
										_el.REMOVE(notificationCat.parentNode);
										SoftNotification.Render("Archive Success");
									},
									fail:function(){
										_el.EMPTY(notificationCat);
										_el.APPEND(notificationCat, [
											"Failed to archive: try again later. ",
											_el.CREATE('button','','',{onclick:function(){_el.EMPTY(notificationCat);}},['Dismiss']),
											" "
										]);
									}
								});
							}
						},["Archive"]);
			}
			var notificationCat;
			var t=d.timeSubmitted.split(/[- :]/);
			return _el.CREATE('div','','',{},[
				_el.CREATE('div','','ContactForm-Display-Wrapper',{},[
					_el.CREATE('div','','ContactForm-Display-Actions',{},[
						but
					]),
					_el.CREATE('div','','',{},[
						"Submitted On: ",
						(new Date(Date.UTC(t[0], t[1]-1, t[2], t[3], t[4], t[5]))).toLocaleString()
					]),
					notificationCat=_el.CREATE('div'),
					_el.CREATE('div','','',{},ParseDetailList(formInputDetail[cform],d))
				])
			]);
		}
		function ArchiveMember(d){
			
		}
		function YearArchive(year, info){
			function Plur(num){
				return ''+num+' '+((num == 1)?'Submission' : 'Submissions');
			}
			var months=['','January','February','March','April','May','June','July','August','September','October','November','December'];
			return _el.CREATE('details','','ContactForm-Display-ArchiveYear',{},[
				_el.CREATE('summary','','',{},[year+' ('+Plur(info.total)+')']),
				...Object.keys(info.months).map(function(m){
					return _el.CREATE('details','','ContactForm-Display-ArchiveMonth',{
						ontoggle:function(){
							var t=this;
							this.ontoggle='';
							var fd=new FormData();
							fd.append('cform', cform);
							fd.append('category', 'archiveSpecific');
							fd.append('year', year);
							fd.append('month', m);
							ElFetch(this,_el.CREATE('div','','',{},["Getting Archived Submissions"]),'/adminTest/apires/contactForms/getList.php', {method:"POST", body:fd}, "json",{
								success:function(res){
									res.data.recents.forEach(function(r){
										_el.APPEND(t, ListMember(r, true));
									});
								},
								fail:function(){
									
								}
							});
						}
					},[
						_el.CREATE('summary','','',{},[months[m]+' ('+Plur(info.months[m].total)+')'])
					])
				})
			]);
		}
		function GetList(){
			if(!cform || !category){
				return;
			}
			var fd=new FormData();
			fd.append('cform', cform);
			fd.append('category', category);
			_el.EMPTY(listCat);
			ElFetch(listCat,_el.CREATE('div'),'/adminTest/apires/contactForms/getList.php', {method:"POST", body:fd}, "json",{
				success:function(res){
					_el.EMPTY(listCat);
					res.data.recents=res.data.recents || [];
					res.data.archives=res.data.archives || [];
					res.data.recents.forEach(function(d){
						_el.APPEND(listCat, ListMember(d));
					});
					for(var mem in res.data.archives)
					{
						_el.APPEND(listCat, YearArchive(mem, res.data.archives[mem]));
					}
					if(!Object.keys(res.data.archives).length && !res.data.recents.length){
						_el.APPEND(listCat, _el.CREATE('h4','','',{},["No Results"]));
					}
				},
				fail:function(){
					
				}
			});
			
		}
		
		function GetArchiveList(){
			
		}
		
		function CFormClick(n){
			return function(){
				cform=n;
				_el.MoveId("selected-contactFormFormButton", this);
				newBut.dispatchEvent(new Event('click'));
			}
		}
		function CatClick(n){
			return function(){
				category=n;
				_el.MoveId("selected-contactFormCategoryButton", this);
				GetList();
			}
		}
		var formNavCat;
		var actArchCat;
		var listCat;
		var newBut;
		_el.APPEND(a.GET_target(true), [
			formNavCat=_el.CREATE('div', 'contactForm-FormNavWrapper'),
			actArchCat=_el.CREATE('div','contactForm-CatNavWrapper','',{},[
				newBut=_el.CREATE('div','','contactFormCategoryButton',{onclick:CatClick('new')},['New']),
				_el.CREATE('div','','contactFormCategoryButton',{onclick:CatClick('archive')},['Archive'])
			]),
			listCat=_el.CREATE('div','contactForm-ListWrapper')
			
		]);
		newBut.dispatchEvent(new Event('click'));
		ElFetch(formNavCat,_el.CREATE('div'),'/adminTest/apires/contactForms/getFormList.php', {method:"GET"}, "json",{
			success:function(res){;
				_el.EMPTY(formNavCat);
				_el.APPEND(formNavCat, res.data.map((d)=>{
					formInputDetail[d.formName]=JSON.parse(d.inps);
					return _el.CREATE('div','','contactFormFormButton',{
						onclick:CFormClick(d.formName)
					},[
						d.formName
					]);
				}));
				document.querySelector('.contactFormFormButton').dispatchEvent(new Event('click'));
			},
			fail:function(){
				
			}
		});
		
	},
	title:"Contact Forms",
	urlEndpoint:"contactForms",
	StartHistory:function(){return {view:"contactForms"};},
	homeButtonText:"Contact Forms",
	upButtonText:"Home",
	upButtonView:"home"
},'blog-news':{
	funct:function(a){
		var listCatcher;
		
		function ArticleCard(inf){
			var comCat;
			return _el.CREATE('div','','BlogEditor-ArtCard-Wrapper',{},[
				_el.CREATE('div','','BlogEditor-ArtCard',{},[
					_el.CREATE('div','','BlogEditor-ArtCard-CommCont',{},[
						comCat=_el.CREATE('div','','BlogEditor-ArtCard-ComCat'),
						_el.CREATE('button','','',{
							onclick:function(e){
								_el.CancelEvent(e);
								VCR.main.CHANGE("blog-news-editor",{articlePk:inf.pk});
							}
						},["Edit"]),
						_el.CREATE('button','','',{
							onclick:function(e){
								_el.CancelEvent(e);
								if(!confirm("Are you sure you want to delete this article?")){return;}
								var fd=new FormData();
								fd.append('artPk', inf.pk);
								ElFetch(comCat,"Deleting Article", 
									"/adminTest/apires/blogs/news/deleteArticle.php", 
									{method:'POST', body:fd}, "text",{
										success:function(jsn){
											SoftNotification.Render("Deletion Successful");
											GetList();
										},
										fail:function(){
											
										}
									}
								);
							}
						},["Delete"])
					]),
					_el.CREATE('div','','BlogEditor-ArtCard-InfCont',{},[
						_el.CREATE('span','','BlogEditor-ArtCard-Title',{},[inf.title]),
						_el.CREATE('br'),
						"Last Modified: "+inf.lastModified
					])
				])
			]);
		}
		function PubArticleCard(inf){
			var art=ArticleCard(inf);
			var comCat=art.querySelector('.BlogEditor-ArtCard-ComCat');
			_el.APPEND(art.querySelector(".BlogEditor-ArtCard-CommCont"), [
				_el.CREATE('button','','',{
					onclick:function(e){
						_el.CancelEvent(e);
						if(!confirm("Are you sure you want to un-publish this article?")){return;}
						var fd=new FormData();
						fd.append('artPk', inf.pk);
						ElFetch(comCat,"Deleting Article", 
							"/adminTest/apires/blogs/news/unpublishArticle.php", 
							{method:'POST', body:fd}, "text",{
								success:function(jsn){
									SoftNotification.Render("Unpublish Successful");
									GetList();
								},
								fail:function(){
									
								}
							}
						);
					}
				},["Un-Publish"])
			]);
			_el.APPEND(art.querySelector(".BlogEditor-ArtCard-InfCont"), [
				_el.CREATE('br'),
				"Published On: "+inf.timePublished
			]);
			
			return art;
		}
		function PrivArticleCard(inf){
			
			var art=ArticleCard(inf);
			var comCat=art.querySelector('.BlogEditor-ArtCard-ComCat');
			_el.APPEND(art.querySelector(".BlogEditor-ArtCard-CommCont"), [
				_el.CREATE('button','','',{
					onclick:function(e){
						_el.CancelEvent(e);
						if(!confirm("Are you sure you want to publish this article?")){return;}
						var fd=new FormData();
						fd.append('artPk', inf.pk);
						ElFetch(comCat,"Deleting Article", 
							"/adminTest/apires/blogs/news/publishArticle.php", 
							{method:'POST', body:fd}, "text",{
								success:function(jsn){
									SoftNotification.Render("Publish Successful");
									GetList();
								},
								fail:function(){
									
								}
							}
						);
					}
				},["Publish"])
			]);
			
			return art;
		}
		
		var page=0, maxPage=0, pageLength=10, published='1';
		function GetList(){
			page=Math.min(maxPage, page);
			page=Math.max(page, 0);
			_el.EMPTY(listCatcher);
			var fd=new FormData();
			fd.append('page', page);
			fd.append('published', published);
			ElFetch(listCatcher,"Getting Article List", 
				"/adminTest/apires/blogs/news/getArticleList.php", 
				{method:'POST', body:fd}, "json",{
					success:function(j){
						j.results.forEach(function(r){
							if(parseInt(published)){
								_el.APPEND(listCatcher, PubArticleCard(r));
							}else{
								_el.APPEND(listCatcher, PrivArticleCard(r));
							}
						});
						
						maxPage=Math.floor(j.total/pageLength);
						if(j.results.length === 0){
							if(page > 0){
								page=maxPage;
								return GetList();
							}
							_el.APPEND(listCatcher, "No Results");
						}
						if(maxPage>page){
							_el.APPEND(listCatcher, _el.CREATE('button','BlogEditor-NextButton','BlogEditor-ListNavButtons',{
								onclick:function(){
									page++;
									GetList();
								}
							},['Next']));
						}
						if(page > 0){
							_el.APPEND(listCatcher, _el.CREATE('button','BlogEditor-PrevButton','BlogEditor-ListNavButtons',{
								onclick:function(){
									page--;
									GetList();
								}
							},['Prev']));
						}
						//debugger;
					},
					fail:function(){
						
					}
				}
			);
		}
		_el.APPEND(a.GET_target(true), [
			_el.CREATE('button','','',{
				onclick:function(){
					VCR.main.CHANGE('blog-news-categoryEditor');
				}
			},['Edit Categories']),
			_el.CREATE('h3','','',{},["Articles"]),
			_el.CREATE('button','','',{
				onclick:function(){
					VCR.main.CHANGE("blog-news-editor");
				}
			},["+Add Article"]),
			_el.CREATE('h4','','',{},["List"]),
			_el.CREATE('h5','','',{},["Select a Published Status"]),
			_el.CREATE('div','BlogEditor-ListCatSelector','',{
				onchange:function(e){
					_el.MoveId('BlogEditor-SelectedPubSelector', e.target.parentNode);
					page=0;
					published=parseInt(e.target.value);
					GetList();
				}
			},[
				_el.CREATE('label','BlogEditor-SelectedPubSelector','BlogEditor-PubSelector',{},[
					"Published: ",
					_el.CREATE('input','','',{name:'pubSelector', type:'radio', value:'1', checked:true})
				]),
				_el.CREATE('label','','BlogEditor-PubSelector',{},[
					"Not Published: ",
					_el.CREATE('input','','',{name:'pubSelector', type:'radio', value:'0'})
				])
			]),
			listCatcher=_el.CREATE('div','BlogEditor-ListCatcher')
		]);
		GetList();
		
	},
	title:"News",
	urlEndpoint:"blog-news",
	StartHistory:function(){return {view:"blog-news"};},
	homeButtonText:"News",
	upButtonText:"Home",
	upButtonView:"home",
	homeHeader:"Blog Editors"
},'blog-news-editor':{
	funct:function(a){
		/// start html input
		INPTYPES.htmlInput=RMFbasicInput({}, {}, function(){
   return this.mas_paragraph.COLL();
}, function(v){
   this.mas_paragraph.SET(''+v);
}, function(config,ret){
	function InsertParaRaw(para, txt, focusOffset){
   var curSt=para.selectionStart || 0;
              var curEnd=para.selectionEnd || 0;

              var v=para.value;
              var stStr=v.slice(0, curEnd);
              var enStr=v.slice(curEnd);
              v=stStr+txt+enStr;
 
              para.value=v;

              para.selectionEnd=curEnd+(focusOffset);
              para.focus();
}
function InsertParaTags(para, tag){
    var curSt=para.selectionStart || 0;
              var curEnd=para.selectionEnd || 0;

              var v=para.value;
              var stStr=v.slice(0, curEnd);
              var enStr=v.slice(curEnd);
              v=stStr+"</"+tag+">"+enStr;
              stStr=v.slice(0, curSt);
              enStr=v.slice(curSt);
              v=stStr+'<'+tag+'>'+enStr;
 
              para.value=v;

              para.selectionEnd=curSt+(tag.length+2);
              para.focus();
}
function InsertParaTagReturn(para, tag){
    var curSt=para.selectionStart || 0;
              var curEnd=para.selectionEnd || 0;

              var v=para.value;
              var stStr=v.slice(0, curEnd);
              var enStr=v.slice(curEnd);
              v=stStr+"\n</"+tag+">"+enStr;
              stStr=v.slice(0, curSt);
              enStr=v.slice(curSt);
              v=stStr+"<"+tag+">\n"+enStr;
 
              para.value=v;

              para.selectionEnd=curSt+(tag.length+3);
              para.focus();
}
function InsertParaTagSelfClose(para, tag){
 var curSt=para.selectionStart || 0;
              var curEnd=para.selectionEnd || 0;

              var v=para.value;
              var stStr=v.slice(0, curEnd);
              var enStr=v.slice(curEnd);
              v=stStr+"<"+tag+" />"+enStr;

              para.value=v;

              para.selectionEnd=curSt+(tag.length+4);
              para.focus();
}
function InsertParaProperty(para, tag){
   var curSt=para.selectionStart || 0;
              var curEnd=para.selectionEnd || 0;

              var v=para.value;
              var stStr=v.slice(0, curEnd);
              var enStr=v.slice(curEnd);
              v=stStr+tag+'=""'+enStr;

              para.value=v;

              para.selectionEnd=curSt+(tag.length+2);
              para.focus();
}
function InsertParaTagProp(para, tagProp){
   var spl=tagProp.split(':');
   var tag=spl[0]; var prop=spl[1];
    var curSt=para.selectionStart || 0;
              var curEnd=para.selectionEnd || 0;

              var v=para.value;
              var stStr=v.slice(0, curEnd);
              var enStr=v.slice(curEnd);
              v=stStr+"</"+tag+">"+enStr;
              stStr=v.slice(0, curSt);
              enStr=v.slice(curSt);
              v=stStr+'<'+tag+'  >'+enStr;
              
              stStr=v.slice(0, curSt+tag.length+2);
              enStr=v.slice(curSt+tag.length+2);

              v=stStr+prop+'=""'+enStr;
              

              para.value=v;

              para.selectionEnd=curSt+(tag.length+2)+(prop.length+2);
              para.focus();
}
function InsertParaSCTagProp(para, tagProp){
   var spl=tagProp.split(':');
   var tag=spl[0]; var prop=spl[1];
   var curSt=para.selectionStart || 0;
              var curEnd=para.selectionEnd || 0;

              var v=para.value;
              var stStr=v.slice(0, curEnd);
              var enStr=v.slice(curEnd);
              v=stStr+"<"+tag+"  />"+enStr;

              stStr=v.slice(0, curEnd+2+tag.length);
              enStr=v.slice(curEnd+2+tag.length);
              v=stStr+prop+'=""'+enStr;

              para.value=v;

              para.selectionEnd=curEnd+(tag.length+2 +prop.length+2);
              para.focus();  
}
   function TagButton(tg){
      return _el.CREATE('button','','htmlTagButton',{onclick:function(e){
         e.preventDefault(); e.cancelBubble=true;
         InsertParaTags(pp.inp, tg);
      }},[tg]);
   }
   function TagButtonReturn(tg){
      return _el.CREATE('button','','htmlTagButton',{onclick:function(e){
         e.preventDefault(); e.cancelBubble=true;
         InsertParaTagReturn(pp.inp, tg);
      }},[tg]);
   }
   function SCTagButton(tg){
      return _el.CREATE('button','','htmlTagButton htmlSCTagButton',{onclick:function(e){
         e.preventDefault(); e.cancelBubble=true;
         InsertParaTagSelfClose(pp.inp, tg);
      }},[tg]);
   }
   function PropertyButton(prop){
      return _el.CREATE('button','','htmlTagButton',{onclick:function(e){
         e.preventDefault(); e.cancelBubble=true;
         InsertParaProperty(pp.inp, prop);
      }},[prop]);
   }
   function CustomButton(txt, callback){
      return _el.CREATE('button','','htmlTagButton',{onclick:function(e){
         var p=prompt('Please enter the '+txt);
         e.preventDefault(); e.cancelBubble=true;
         if(!p){return;}
         callback(pp.inp, p);
      }},[txt]);
   }
   function TagPropButton(tag,prop){
      return _el.CREATE('button','','htmlTagButton',{onclick:function(e){
         e.preventDefault(); e.cancelBubble=true;
         InsertParaTagProp(pp.inp, tag+':'+prop);
      }},[tag]);
   }
   function SCTagPropButton(tag,prop){
      return _el.CREATE('button','','htmlTagButton htmlSCTagButton',{onclick:function(e){
         e.preventDefault(); e.cancelBubble=true;
         InsertParaSCTagProp(pp.inp, tag+':'+prop);
      }},[tag]);
   }

   function RawButton(tagTxt, txt, offset){
      return _el.CREATE('button','','htmlTagButton',{onclick:function(e){
         e.preventDefault(); e.cancelBubble=true;
         InsertParaRaw(pp.inp, txt, offset);
      }},[tagTxt]);
   }
   function InputButton(type){
      return RawButton(type+' Input','<input type="'+type+'" name="" />',21+type.length);
   }

   var butHolder;
   var pp=ret.mas_paragraph=this.paragraph(_ob.COMBINE(config,{wordWrap:false, spellCheck:false}));
   var keymap={
        "1":{tag:'h1', f:InsertParaTags},
        "2":{tag:'h2', f:InsertParaTags},
        "3":{tag:'h3', f:InsertParaTags},
        "4":{tag:'h4', f:InsertParaTags},
        "5":{tag:'h5', f:InsertParaTags},
        "6":{tag:'h6', f:InsertParaTags},
        "p":{tag:'p', f:InsertParaTagReturn},
        "d":{tag:'div', f:InsertParaTagReturn},
        "m":{tag:'img:src', f:InsertParaSCTagProp},
        "i":{tag:'i', f:InsertParaTags},
        "b":{tag:'b', f:InsertParaTags},
        "r":{tag:'br', f:InsertParaTagSelfClose},
      };
   function ppKeyFunct(e){
      
      if(e.ctrlKey){
         var tag=keymap[event.key];
         if(tag){
            e.preventDefault();
            tag.f(pp.inp,tag.tag);
         }
      }
   }
   pp.inp.addEventListener("focus",function(){
      window.addEventListener('keydown', ppKeyFunct);
   });
   pp.inp.addEventListener("blur",function(){window.removeEventListener('keydown',ppKeyFunct);});
   var el=_el.CREATE('div','','',{onclick:function(e){e.preventDefault();}},[
     _el.CREATE('div','','',{onclick:function(e){e.preventDefault();}},[
        _el.CREATE('details','','',{onclick:function(e){e.cancelBubble=true;}},[_el.CREATE('summary','','',{},["Shorts"]),
        _el.CREATE('details','','htmlInputDetails',{onclick:function(e){e.cancelBubble=true;}},[
           _el.CREATE('summary','','',{},["Constructional"]),
           RawButton('comment','<!--  -->',6),
           RawButton('doctype','<!DOCTYPE html>', 0),
           TagButtonReturn('html'), TagButtonReturn('head'), TagButtonReturn('body')
        ]),
        _el.CREATE('details','','htmlInputDetails',{onclick:function(e){e.cancelBubble=true;}},[
           _el.CREATE('summary','','',{},["Head"]),
           TagButtonReturn('script'),
           TagButtonReturn('style'),
           SCTagPropButton('base','href'),
           SCTagPropButton('link', 'href'),
           TagButton('title'),
           RawButton('meta', '<meta name="" content=""/>',23),
           RawButton('style link', '<link rel="stylesheet" href="" />', 29),
           _el.CREATE('div','','',{},['Properties']),
           PropertyButton('target')
        ]),
        _el.CREATE('details','','htmlInputDetails',{onclick:function(e){e.cancelBubble=true;}},[
           _el.CREATE('summary','','',{},["Directional + East Asia"]),
           TagButton('bdi'), TagButton('bdo'),
           _el.CREATE('div','','',{},["East Asia"]),
           TagButton('rp'), TagButton('rt'), TagButton('ruby')
        ]),
        _el.CREATE('details','','htmlInputDetails',{onclick:function(e){e.cancelBubble=true;}},[
           _el.CREATE('summary','','',{},["Layout"]),
           SCTagButton('br'),
           SCTagButton('wbr'),
           TagButtonReturn('div'),
           TagButton('span'),
           TagButtonReturn('main'),
           TagButtonReturn('article'),
           TagButtonReturn('aside'),
           TagButtonReturn('details'),
           TagButton('summary'),
           TagButtonReturn('address'),
           TagButtonReturn('dialog'),
           TagButtonReturn('figure'),
           TagButton('figcaption'),
           TagButtonReturn('footer'),
           TagButtonReturn('header'),
           TagButtonReturn('nav'),
           TagButtonReturn('section'),
           TagPropButton('iframe', 'src'),
           TagButtonReturn('noscript'),
           TagButtonReturn('template'),
           SCTagButton('hr'),
           _el.CREATE('div'),
           RawButton('open', 'open',0)
        ]),
        _el.CREATE('details','','htmlInputDetails',{onclick:function(e){e.cancelBubble=true;}},[
           _el.CREATE('summary','','',{},["Headers"]),
           TagButton('h1'),TagButton('h2'), TagButton('h3'), TagButton('h4'), TagButton('h5'),TagButton('h6'),
        ]),
        _el.CREATE('details','','htmlInputDetails',{onclick:function(e){e.cancelBubble=true;}},[
           _el.CREATE('summary','','',{},["Paragraphs"]),
           TagButtonReturn('p'),TagButton('b'),TagButton('i'),TagButton('u'),TagButton('strong'),TagButton('q'),
           TagButton('span'),
           TagButton('sub'),TagButton('sup'),
           TagButton('s'),
           TagButton('samp'),
           TagButton('em'),
           TagPropButton('a','href'), 
           TagButton('span'),
           TagButton('kbd'),
           TagButton('ins'),
           TagButton('mark'),
           TagButton('small'),
           TagPropButton('time','datetime'),
           TagPropButton('data','value'),
           TagButton('dfn'),TagPropButton('abbr', 'title'),
           TagButtonReturn('address'),
           TagPropButton('blockquote', 'cite'),
           TagButton('cite'),
           TagButtonReturn('code'),
           TagButton('del'),
           TagButton('output'),
           TagButton('pre'),
           TagButton('var'),
           RawButton('progress', '<progress value="", max=""></progress>',17),
           RawButton('meter value', '<meter value=""></meter>', 14),
           RawButton('meter min-max','<meter min="" max="" value=""></meter>',28),
           _el.CREATE('br'),_el.CREATE('span','','',{},['Properties']),_el.CREATE('br'),
           PropertyButton('title'),
           PropertyButton('cite')
        ]),
        _el.CREATE('details','','htmlInputDetails',{onclick:function(e){e.cancelBubble=true;}},[
           _el.CREATE('summary','','',{},["Lists"]),
           TagButtonReturn('ol'),TagButtonReturn('ul'),TagButton('li'),
           _el.CREATE('br'),
           TagButtonReturn('dl'), TagButton('dt'), TagButton('dd'),
           _el.CREATE('br'),
           TagPropButton('data','value')
           
        ]),
        _el.CREATE('details','','htmlInputDetails',{onclick:function(e){e.cancelBubble=true;}},[
           _el.CREATE('summary','','',{},["Tables"]),
           TagButtonReturn('table'),TagButtonReturn('tr'),TagButton('th'),TagButton('td'),
           TagButton('caption'),
           TagButtonReturn('colgroup'),
           TagButton('col'),
           TagButtonReturn('thead'),
           TagButtonReturn('tbody'),
           TagButtonReturn('tfoot'),
           _el.CREATE('div','','',{},["Properties"]),
           PropertyButton('colspan'),
           PropertyButton('rowspan'),
        ]),
        _el.CREATE('details','','htmlInputDetails',{onclick:function(e){e.cancelBubble=true;}},[
           _el.CREATE('summary','','',{},["Media"]),
           TagButton('canvas'),
           TagButtonReturn('svg'),
           TagButtonReturn('picture'),
           SCTagPropButton('img','src'),
           SCTagPropButton('source','srcset'),
           RawButton('embed','<embed type="" src="" />',19),
           RawButton('object', '<object data="" width="" height=""></object>', 14),
           RawButton('param', '<param name="" value=""/>',13),
           _el.CREATE('div','','',{},["map"]),
           TagButtonReturn('map'),
           TagButton('area'),
           _el.CREATE('div','','',{},["Audio/Video"]),
           TagButtonReturn('audio'),
           TagButtonReturn('video'),
           RawButton('source', '<source src="" type=""/>',13),
           RawButton('track','<track src="" kind="" srclang="" label="" />',12),
           _el.CREATE('div','','',{},["Properties"]),
           RawButton('controls', 'controls', 0),
           PropertyButton('media'),
           PropertyButton('srcset'),
           PropertyButton('src'),
           PropertyButton('alt'),
           PropertyButton('type'),
           PropertyButton('usemap'),
           PropertyButton('shape'),
           PropertyButton('coords')
        ]),
        _el.CREATE('details','','htmlInputDetails',{onclick:function(e){e.cancelBubble=true;}},[
           _el.CREATE('summary','','',{},["Forms"]),
           TagButtonReturn('form'),
           TagButtonReturn('label'),
           TagButton('input'),
           InputButton('checkbox'),
           InputButton('radio'),
           TagButtonReturn('select'),
           TagButtonReturn('datalist'),
           TagPropButton('option','value'),
           TagPropButton('optgroup','label'),
           TagButton('button'),
           TagButton('textarea'),
           TagButtonReturn('fieldset'),
           TagButton('legend'),
           _el.CREATE('div','','',{},["Self Closing"]),
           SCTagButton('input'),
           SCTagPropButton('option','value'),
           _el.CREATE('div','','',{},["Properties"]),
           PropertyButton('method'),
           PropertyButton('action'),
           PropertyButton('for'),
           PropertyButton('name'),
           PropertyButton('list'),
           PropertyButton('value'),
           PropertyButton('type'),
        ]),
        _el.CREATE('details','','htmlInputDetails',{onclick:function(e){e.cancelBubble=true;}},[
           _el.CREATE('summary','','',{},["Properties"]),
           PropertyButton('class'),
           PropertyButton('id'),
           PropertyButton('src'),
           PropertyButton('href'),
           PropertyButton('alt'),
        ]),
        _el.CREATE('details','','htmlInputDetails',{onclick:function(e){e.cancelBubble=true;}},[
           _el.CREATE('summary','','',{},["Baseplate"]),
           RawButton("Basic Baseplate", '<header><div class="prettyMargin"><div class="prettyMarginInner"><a onclick="VCR.main.EventCHANGE(event, \'`--HomePageName--`\');" href="/" class="invisiAnchors"></a></div></div></header>\n<div id="navWrapper"><div id="navBacker" onclick="_el.CancelEvent(event); document.documentElement.classList.remove(\'navActive\')"></div><nav><header><a onclick="VCR.main.EventCHANGE(event, \'`--HomePageName--`\');" href="/" class="invisiAnchors"></a></header>`--NavButtons--`</nav></div>`--HamburgerButton--`\n<main><div class="prettyMargin"><div class="prettyMarginInner">`--Content--`</div></div></main>\n<footer><div class="prettyMargin"><div class="prettyMarginInner">`--CopyWrite--``--FooterNav--`</div></div></footer>'),
           RawButton("App Button Baseplate", '<div style="height:10vh;"></div><header><div class="prettyMargin"><div class="prettyMarginInner"><a onclick="VCR.main.EventCHANGE(event, \'`--HomePageName--`\');" href="/" class="invisiAnchors"></a></div></div></header>\n\n<main><div class="prettyMargin"><div class="prettyMarginInner">`--Content--`</div></div></main>\n<footer><div class="prettyMargin"><div class="prettyMarginInner"> `--CopyWrite--``--FooterNav--`</div></div></footer>'),
           RawButton("Basic Baseplate With Fade", '<div id="docuAniWrapper" class="aniRest1"><header><div class="prettyMargin"><div class="prettyMarginInner"><a onclick="VCR.main.EventCHANGE(event, \'`--HomePageName--`\');" href="/" class="invisiAnchors"></a></div></div></header>\n<div id="navWrapper"><div id="navBacker" onclick="_el.CancelEvent(event); document.documentElement.classList.remove(\'navActive\')"></div><nav><header><a onclick="VCR.main.EventCHANGE(event, \'`--HomePageName--`\');" href="/" class="invisiAnchors"></a></header>`--NavButtons--`</nav></div>`--HamburgerButton--`\n<main><div class="prettyMargin"><div class="prettyMarginInner"><div id="contentTarget1">`--Content--`</div><div id="contentTarget2"></div></div></div></main>\n<footer><div class="prettyMargin"><div class="prettyMarginInner">`--CopyWrite--``--FooterNav--`</div></div></footer>\n</div>'),
           RawButton("App Button Baseplate With Fade", '<div id="docuAniWrapper" class="aniRest1"><div style="height:10vh;"></div><header><div class="prettyMargin"><div class="prettyMarginInner"><a onclick="VCR.main.EventCHANGE(event, \'`--HomePageName--`\');" href="/" class="invisiAnchors"></a></div></div></header>\n\n<main><div class="prettyMargin"><div class="prettyMarginInner"><div id="contentTarget1">`--Content--`</div><div id="contentTarget2"></div></div></div></main>\n<footer><div class="prettyMargin"><div class="prettyMarginInner">`--CopyWrite--``--FooterNav--`</div></div></footer></div>'),
        ]),
        CustomButton('Custom Tag', InsertParaTags),
        CustomButton('Custom Self Close Tag', InsertParaTagSelfClose),
        CustomButton('Custom Property', InsertParaProperty)
        
     ]),
     ]),
     ret.mas_paragraph.inp
   ]);
   //console.log('hey', ret.mas_paragraph.inp);
   ret.inp=el;
   ret.el=el;
}, 'label');
//// end html input
		var previewLaunch=false;
		var colImgs=[];
		var mediaCatcher={
			imgs:[],
			imgSizes:[],
			vids:[],
			auds:[]
		};
		INPTYPES.blogCategory=function(config){
			
			
			var el=_el.CREATE('div');
			
			
			ElFetch(_el.CREATE('div'),"Getting Categories", 
				"/adminTest/apires/blogs/news/getCategoryList.php", 
				{method:'GET'}, "json",{
					success:function(r){
						if(!r.data.length){return;}
						var chk=INPTYPES.checkFamily(_ob.COMBINE(config, {
							inps:r.data.map(function(n){return {labelText:n.name, value:n.name};})
						}));
						_el.APPEND(el, chk.el);
						_ob.INSERT(ret, chk);
						if(setSave){
							ret.SET(setSave);
						}
					},
					fail:function(){
						
					},
				}
			);
			
			var setSave='';
			var ret ={
				inp:el, el:el,
				SET:function(v){setSave=v;},
				COLL:function(){return [];}
			};
			return ret;
			
		}
		
		INPTYPES.blogImage=function(config){
			var cmpnd=this.compound(_ob.COMBINE(config,{
				inps:[
					{name:'name', labelText:'Name', type:'singleLine'},
					{name:'alt', labelText:'Alt', type:'singleLine'},
					{name:'slug', type:'hidden', value:''},
					{name:'ext', type:'hidden', value:''},
					{name:'sizes', type:'hidden', value:'[]'},
					{name:'mime', type:'hidden', value:''},
					{name:'width', type:'hidden', value:''},
					{name:'height', type:'hidden', value:''}
				]
			}));
			cmpnd.oldCOLL=cmpnd.COLL;
			var fileInp, shareInp, previewCatcher;
			var hasChanged=false;
			var obUrl;
			_el.APPEND(cmpnd.inp, [
				_el.CREATE('label','','',{},[
					fileInp=_el.CREATE('input','','',{type:'file', onchange:function(){
						hasChanged=true;
						_el.EMPTY(previewCatcher);
						if(obUrl){URL.revokeObjectURL(obUrl);}
						if(!this.files.length){return;}
						
						
						_el.APPEND(previewCatcher, _el.CREATE('img','','Blog-Editor-ImagePreview',{src:obUrl=URL.createObjectURL(this.files[0])}));
					}, attributes:{accept:'image/*'}}),
				]),
				_el.CREATE('br'),_el.CREATE('br'),
				_el.CREATE('label','','',{},[
					"Share Image: ",
					shareInp=_el.CREATE('input','','',{type:'radio', name:'Blog-ShareImage'})
				]),
				_el.CREATE('details','','',{},[_el.CREATE('summary','','',{},["Preview"]), previewCatcher=_el.CREATE('div','','',{},["No Preview Yet"])])
			]);
			cmpnd.COLL=function(){
				var oldRes=cmpnd.oldCOLL();
				if(hasChanged && fileInp.files[0]){
					mediaCatcher.imgs.push({
						file:fileInp.files[0],
						mime:fileInp.files[0].type,
						name:cmpnd.oldCOLL().name,
						sub:'source'
					});
				}
				
				return _ob.COMBINE(cmpnd.oldCOLL(), {
					shareImage:shareInp.checked
				});
			}
			cmpnd.oldSET=cmpnd.SET;
			cmpnd.SET=function(v){
				cmpnd.oldSET(v);
				shareInp.checked=!!v.shareImage;
				if(v.ext){
					_el.EMPTY(previewCatcher);
					_el.APPEND(previewCatcher, _el.CREATE('img','','Blog-Editor-ImagePreview',{src:"/adminTest/apires/blogs/news/previewMedia.php?artSlug="+topRmf.COLL().originalSlug+"&resource=/imgs/"+v.slug+"/source."+v.ext}));
					
				}
			}
			return cmpnd;
		}
		INPTYPES.blogAudio=function(config){
			var cmpnd=this.compound(_ob.COMBINE(config,{
				inps:[
					{name:'name', labelText:'Name', type:'singleLine'},
					{name:'slug', type:'hidden', value:''},
					{name:'ext', type:'hidden', value:''}
				]
			}));
			cmpnd.oldCOLL=cmpnd.COLL;
			var fileInp, shareInp, previewCatcher;
			var hasChanged=false;
			var obUrl;
			_el.APPEND(cmpnd.inp, _el.CREATE('label','','',{},[
				fileInp=_el.CREATE('input','','',{type:'file', onchange:function(){
					hasChanged=true;
					_el.EMPTY(previewCatcher);
					if(obUrl){URL.revokeObjectURL(obUrl);}
					if(!this.files.length){return;}
					
					
					_el.APPEND(previewCatcher, _el.CREATE('audio','','',{attributes:{controls:''},src:URL.createObjectURL(this.files[0])}));
				}, attributes:{accept:'audio/mp3'}}),
				_el.CREATE('details','','',{},[_el.CREATE('summary','','',{},["Preview"]), previewCatcher=_el.CREATE('div','','',{},["No Preview Yet"])])
			]));
			cmpnd.COLL=function(){
				if(hasChanged && fileInp.files[0]){
					mediaCatcher.auds.push({
						file:fileInp.files[0],
						mime:fileInp.files[0].type,
						name:cmpnd.oldCOLL().name,
						sub:'source'
					});
				}
				return _ob.COMBINE(cmpnd.oldCOLL(), {
					needsUpload:!!fileInp.files.length,
					hasChanged:hasChanged
				});
			}
			cmpnd.oldSET=cmpnd.SET;
			cmpnd.SET=function(v){
				cmpnd.oldSET(v);
				if(v.src){
					_el.EMPTY(previewCatcher);
					_el.APPEND(previewCatcher, _el.CREATE('audio','','',{src:v.src}));
				}
			}
			return cmpnd;
			
		}
		INPTYPES.blogVideo=function(config){
			var cmpnd=this.compound(_ob.COMBINE(config,{
				inps:[
					{name:'name', labelText:'Name', type:'singleLine'},
					{name:'slug', type:'hidden', value:''},
					{name:'ext', type:'hidden', value:''}
				]
			}));
			cmpnd.oldCOLL=cmpnd.COLL;
			var fileInp, shareInp, previewCatcher;
			var hasChanged=false;
			var obUrl;
			_el.APPEND(cmpnd.inp, _el.CREATE('label','','',{},[
				fileInp=_el.CREATE('input','','',{type:'file', onchange:function(){
					hasChanged=true;
					_el.EMPTY(previewCatcher);
					if(obUrl){URL.revokeObjectURL(obUrl);}
					if(!this.files.length){return;}
					
					
					_el.APPEND(previewCatcher, _el.CREATE('video','','Blog-Editor-VideoPreview',{attributes:{controls:''},src:URL.createObjectURL(this.files[0])}));
				}, attributes:{accept:'video/mp4'}}),
				_el.CREATE('details','','',{},[_el.CREATE('summary','','',{},["Preview"]), previewCatcher=_el.CREATE('div','','',{},["No Preview Yet"])])
			]));
			cmpnd.COLL=function(){
				return _ob.COMBINE(cmpnd.oldCOLL(), {
					needsUpload:!!fileInp.files.length,
					hasChanged:hasChanged
				});
			}
			cmpnd.oldSET=cmpnd.SET;
			cmpnd.SET=function(v){
				cmpnd.oldSET(v);
				if(v.src){
					_el.EMPTY(previewCatcher);
					_el.APPEND(previewCatcher, _el.CREATE('video','','',{src:v.src}));
				}
			}
			return cmpnd;
			
		}
		/*function Sectionize(label,nameList, inpList){
			var newList=[];
			var secList=[];
			inpList.forEach(function(i){
				if(nameList.indexOf(i.name) > -1){
					secList.push(i);
				}else{
					newList.push(i);
				}
			});
			newList.push({
				labelText:label,
				type:'sectionHider',
				inps:secList
				
			});
			
			return newList;
		}*/
		
		var heading="New Article";
		var ogValue='';
		var rmfCatcher, comCatcher,scriptCatcher, imgCatcher, vidCatcher, audCatcher, metaCatcher,advHtmlCatcher;
		var needGetValue=false;
		var articlePk=false;
		if(articlePk= VCR.main.GET_viewData().articlePk){
			heading="Edit Article";
			needGetValue=true;
		}
		_el.APPEND(a.GET_target(true), _el.CREATE('div','Blog-Editor-Wrapper','',{},[
			_el.CREATE('h3','','',{},[heading]),
			comCatcher=_el.CREATE('div', 'Blog-Editor-ComCatcher','',{onclick:function(){_el.EMPTY(this);}}),
			rmfCatcher=_el.CREATE('div'),
			advHtmlCatcher=_el.CREATE('details','','',{},[
				_el.CREATE('summary','','',{},["Advanced HTML"]),
				
			]),
			metaCatcher=_el.CREATE('details','','',{},[
				_el.CREATE('summary','','',{},["Meta"]),
				
			]),
			_el.CREATE('details','','',{},[
				_el.CREATE('summary','','',{},["Media"]),
				imgCatcher=_el.CREATE('details','','',{},[
					_el.CREATE('summary','','',{},["Images"]),
				]),
				audCatcher=_el.CREATE('details','','',{},[
					_el.CREATE('summary','','',{},["Audio"]),
				]),
				vidCatcher=_el.CREATE('details','','',{},[
					_el.CREATE('summary','','',{},["Video"]),
				]),
			]),
			scriptRmfCatcher=_el.CREATE('details','','',{},[
				_el.CREATE('summary','','',{},["Server Scripts"]),
				
			]),
			_el.CREATE('button','Blog-Editor-SubmitButton','',{
				onclick:function(){
					var t=this;
					var caughtPreviewLaunch=previewLaunch;
					previewLaunch=false;
					_el.EMPTY(comCatcher);
					var fd=new FormData();
					var dat={
						top:topRmf.COLL(),
						advHtml:advRmf.COLL(),
						scripts:scriptRmf.COLL(),
						imgs:imgRmf.COLL(),
						audios:audRmf.COLL(),
						videos:vidRmf.COLL(),
						meta:metaRmf.COLL()
					};
					var topSaver=dat.top;
					//console.log(topSaver);
					var dat=JSON.stringify(dat);
					var enc=new TextEncoder();
					dat=enc.encode(dat);
					var reader=new FileReader();
					reader.onload=function(){
						fd.append('dat', reader.result);
						ElFetch(comCatcher,"Saving Article Info", 
							"/adminTest/apires/blogs/news/saveArticleInfo.php", 
							{method:'POST', body:fd}, "json",{
								success:function(j){
									var newVids=mediaCatcher.vids || [];
									var newAuds=mediaCatcher.auds || [];
									var newImgs=mediaCatcher.imgs || [];
									var newImgSizes=[];
									
									var artPk=j.artPk;
									var artSlug=j.artSlug;
									//return;
									
									var mod=BasicModal();
									var progressCatcher, generalProgressCatcher, labelHeading, progressLabel;
									_el.APPEND(mod.client, [
										labelHeading=_el.CREATE('h3','','',{},["Uploading Media"]),
										generalProgressCatcher=_el.CREATE('div'),
										progressLabel=_el.CREATE('div'),
										progressCatcher=_el.CREATE('div')
									]);
									
									if(!newVids.length && !newAuds.length && !newImgs.length){
										Seal();
										return;
									}
									
									function Seal(){
										var fd=new FormData();
										fd.append('artPk', artPk);
										fd.append('top', JSON.stringify({published:topSaver.published}));
										ElFetch(progressLabel,`Sealing Upload`, 
											"/adminTest/apires/blogs/news/sealUpload.php", 
											{method:'POST', body:fd}, "text",{
												success:function(j){
													SoftNotification.Render("Success!");
													var st=history.state;
													st.VCR.main.viewData=st.VCR.main.viewData || {};
													st.VCR.main.viewData.articlePk=artPk;
													if(caughtPreviewLaunch){
														window.open("/adminTest/apires/blogs/news/preview.php?artSlug="+artSlug, 'PREVIEW_WINDOW');
													}
													history.replaceState(st,'');
													location.reload();
												},
												fail:function(){
													SoftNotification.Render("Failed: Upload Aborted");
													mod.CLOSE();
												}
											}
										);
										
									}
									function NextUpload(){
										
										function ImageSplinter(){
											_el.APPEND(generalProgressCatcher,'Processing Image');
											var reader= new FileReader();
											
											
											
											reader.onload=function(e){
												var srcImg=_el.CREATE('img','','',{src:e.target.result, onload:function(){
													
													var canv=_el.CREATE('canvas');
													var ctx=canv.getContext('2d');
													var w=srcImg.naturalWidth;
													var h=srcImg.naturalHeight;
													canv.width=w; canv.height=h;
													
													
													var conv=1;
													function ConvertIt(){
														if(w/conv < 50){
															return GoForIt();
														}
														conv*=2;
														var th=Math.floor(h/conv);
														var tw=Math.floor(w/conv);
														
														canv.width=tw; canv.height=th;
														
														ctx.clearRect(0,0,w,h);
														ctx.drawImage(srcImg, 0,0,tw,th);
														canv.toBlob(function(e){
															newImgSizes.push({
																file:e,
																mime:med.mime,
																name:med.name,
																sub:tw+"x"+th
															});
															if(med.mime !== "image/webp"){
																canv.toBlob(function(e){
																	newImgSizes.push({
																		file:e,
																		originalMime:med.mime,
																		mime:"image/webp",
																		name:med.name,
																		sub:tw+"x"+th
																	});
																	ConvertIt();
																}, 'image/webp');
															}else{
																ConvertIt();
															}
														}, med.mime);
													}
													if(['image/jpg', 'image/jpeg', 'image/png'].indexOf(med.mime) > -1){
														ctx.clearRect(0,0,w,h);
														ctx.drawImage(srcImg,0,0,w,h);
														canv.toBlob(function(e){
															newImgSizes.push({
																file:e,
																originalMime:med.mime,
																name:med.name,
																sub:'source',
																mime:'image/webp'
															});
															ConvertIt();
														},'image/webp');
													}else{
														ConvertIt();
													}
												}});
											}
											reader.readAsDataURL(med.file);
										}
										function GoForIt(){
											_el.APPEND(generalProgressCatcher,[
												_el.CREATE('h4','','',{},['Remaining']),
												_el.CREATE('ul','','',{},[
													_el.CREATE('li','','',{},["Images: "+imgRem]),
													_el.CREATE('li','','',{},["Videos: "+vidRem]),
													_el.CREATE('li','','',{},["Audio: "+audRem]),
												])
											]);
											ElFetch(progressLabel,`Initializing ${med.type} Upload (${med.name}/${med.sub})`, 
												"/adminTest/apires/blogs/news/initMedia.php", 
												{method:'GET'}, "json",{
													success:function(j){
														ContinueUpload(med, j.uploadToken);
													},
													fail:function(){
														SoftNotification.Render("Failed: Upload Aborted");
														mod.CLOSE();
													}
												}
											);
										}
										var med;
										var imgRem=newImgs.length;
										var vidRem=newVids.length;
										var audRem=newAuds.length;
										_el.EMPTY(generalProgressCatcher);
										_el.EMPTY(progressCatcher);
										if(newImgs.length){
											med=newImgs.pop();
											med.type="Image";
											if(med.sub === 'source' && ['jpeg','jpg','png', 'webp'].map((v)=>"image/"+v).indexOf(med.mime) > -1){
												return ImageSplinter();
											}
										}else if(newImgSizes.length){
											med=newImgSizes.pop();
											med.type="Image";
										}else if(newAuds.length){
											
											med=newAuds.pop();
											med.type="Audio";
											
										}else if(newVids.length){
											med=newVids.pop();
											med.type="Video";
											
										}else{
											Seal();
										}
										
										if(med){
											GoForIt();
											
										}
									}
									function ContinueUpload(med, uploadToken){
										if(!med.chunkTracker){
											med.chunkTracker={
												fileSize:med.file.size,
												chunkSize:1024*1024,
												numChunks:Math.ceil(med.file.size/(1024*1024)),
												chunkIndex:0
											};
										}
										var offset=med.chunkTracker.chunkIndex*med.chunkTracker.chunkSize;
										var chunk=med.file.slice(offset,offset+med.chunkTracker.chunkSize);
										med.chunkTracker.chunkIndex++;
										var fd=new FormData();
										fd.append('artPk',artPk);
										fd.append('artSlug',artSlug);
										fd.append('mediaMime', med.mime);
										fd.append('originalMime', med.originalMime || '');
										fd.append('mediaBroadType', med.type);
										fd.append('mediaName', med.name);
										fd.append('mediaSub', med.sub);
										fd.append('dd', chunk);
										fd.append('blogSection','article');
										fd.append('uploadToken', uploadToken);
										fd.append('final', (med.chunkTracker.chunkIndex > med.chunkTracker.numChunks)?'1':'0');
										ElFetch(progressLabel,"Uploading "+med.type+": "+med.name+'/'+med.sub, 
											"/adminTest/apires/blogs/news/continueMedia.php", 
											{method:'POST', body:fd}, "text",{
												success:function(j){
													if(med.chunkTracker.chunkIndex > med.chunkTracker.numChunks){
														NextUpload();
													}else{
														ContinueUpload(med, uploadToken);
													}
												},
												fail:function(){
													SoftNotification.Render("Failed: Upload Aborted");
													mod.CLOSE();
												}
											}
										);
									}
									
									NextUpload();
									
								},
								fail:function(){
									
								}
							},
							{
								button:t
							}
						);

					}
					reader.readAsDataURL(new File([dat],'',{type:"application/octet-stream"}));
					

					
				}
			},"Save"),
			_el.CREATE('button','Blog-Editor-PreviewButton','',{
				onclick:function(){
					previewLaunch=true;
					document.getElementById("Blog-Editor-SubmitButton").dispatchEvent(new Event('click'));
					
				}
			},["Preview"]),
			_el.CREATE('button','Blog-Editor-TemplateButton','',{
				onclick:function(){
					function Copier(tg, args,desc){
						
						return _el.CREATE('button','','',{
							// TODO remove this style
							style:{margin:'10px'},
							onclick:function(){
								var lvl=[...lev.querySelectorAll('input')].filter((e)=>e.checked).pop().value;
								var rlvl=lvl.split('').reverse().join('');
								var t;
								navigator.clipboard.writeText(t=(lvl+([tg].concat(args || [])).join(rlvl)+rlvl));
								SoftNotification.Render(_el.CREATE('div','','',{},["Template Text Copied: ", _el.CREATE('br'), t]));
								
							}
							
						},[tg]);
					}
					var lev;
					var mod=BasicModal();
					_el.APPEND(mod.client, [
						_el.CREATE('h3','','',{},["Templates (Click to Copy)"]),
						_el.CREATE('br'),_el.CREATE('br'),
						_el.CREATE('h4','','',{},['Levels']),
						lev=_el.CREATE('div','','',{},[
							_el.CREATE('label','','',{},[
								"`-- ",
								_el.CREATE('input','','',{type:'radio', name:'levelSelector', value:'`--', checked:true})
							]),
							_el.CREATE('label','','',{},[
								"`~~ ",
								_el.CREATE('input','','',{type:'radio', name:'levelSelector', value:'`~~'})
							]),
							_el.CREATE('label','','',{},[
								"#~~ ",
								_el.CREATE('input','','',{type:'radio', name:'levelSelector', value:'#~~'})
							]),
						]),
						_el.CREATE('h4','','',{},['Templates']),
						_el.CREATE('br'),_el.CREATE('br'),
						Copier('Article-Slug'),
						_el.CREATE('br'),
						Copier('Article-AbsolutePrefix'),
						_el.CREATE('br'),
						_el.CREATE('h5','','',{},['Pictures']),
						...imgRmf.COLL().list.map((v)=>{return Copier('Article-Picture--`'+v.name,["{mainWidth:'?',mainHeight:'?',class:'?',id:'?',sizeFactor:'?'}"]);})
					]);
				}
			},["`Templates`"]),
		]));
		
		var topRmf=RMFORM(rmfCatcher, [
				{name:'title', labelText:'Title', type:'singleLine'},
				{name:'published', labelText:'Published', type:'checkbox'},
				{name:'categories',labelText:'Categories', type:'blogCategory'},
				{name:'article', labelText:'Article', type:'htmlInput', wordWrap:false, spellCheck:false},
				
				{name:'pk',  type:'hidden', value:''},
				{name:'originalTitle', type:'hidden', value:''},
				{name:'originalSlug', type:'hidden', value:''}
		],'articleTop', {
			collProc:function(c){
				
			}
		});
		_el.REMOVE(topRmf.form.querySelector('.rmfSubmitButton'));
		
		var advRmf=RMFORM(advHtmlCatcher, [
				{name:'igniter', labelText:'Igniter', type:'singleLine'},
				{name:'js', labelText:'JS', type:'paragraph', wordWrap:false, spellCheck:false},
				{name:'css', labelText:'CSS', type:'paragraph', wordWrap:false, spellCheck:false},
				
		],'articleAdvanced', {
			collProc:function(c){
				
			}
		});
		_el.REMOVE(advRmf.form.querySelector('.rmfSubmitButton'));
		
		var scriptRmf=RMFORM(scriptRmfCatcher, [
			{name:'list',type:'dynamicList', inpType:'compound', inpConfig:{inps:[
				{name:'name', labelText:'Name', type:'singleLine'},
				{name:'content', labelText:'Content', type:'paragraph', wordWrap:false, spellCheck:false},
				{name:'pk',  type:'hidden'}
			]}}
		],'articleScriptList', {
			collProc:function(c){
				
			}
		});
		_el.REMOVE(scriptRmf.form.querySelector('.rmfSubmitButton'));
		
		var imgRmf=RMFORM(imgCatcher, [
			{name:'list',type:'dynamicList', inpType:'blogImage', inpConfig:{}}
		],'articleImgList', {
			collProc:function(c){
				
			}
		});
		_el.REMOVE(imgRmf.form.querySelector('.rmfSubmitButton'));
		
		
		var audRmf=RMFORM(audCatcher, [
			{name:'list',type:'dynamicList', inpType:'blogAudio', inpConfig:{}}
		],'articleAudList', {
			collProc:function(c){
				
			}
		});
		_el.REMOVE(audRmf.form.querySelector('.rmfSubmitButton'));
		
		
		var vidRmf=RMFORM(vidCatcher, [
			{name:'list',type:'dynamicList', inpType:'blogVideo', inpConfig:{}}
		],'articleVidList', {
			collProc:function(c){
				
			}
		});
		_el.REMOVE(vidRmf.form.querySelector('.rmfSubmitButton'));
		
		
		var metaRmf=RMFORM(metaCatcher, [
			{name:'description', labelText:'Description', type:'paragraph'}
		],'articleMetaList', {
			collProc:function(c){
				
			}
		});
		_el.REMOVE(metaRmf.form.querySelector('.rmfSubmitButton'));
		
		if(needGetValue){
			var subBut=document.querySelector("#Blog-Editor-SubmitButton");
			subBut.style.display="none";
			var fd=new FormData();
			fd.append('artPk', articlePk);
			ElFetch(comCatcher,"Getting Article Info", 
				"/adminTest/apires/blogs/news/getArticleInfo.php", 
				{method:'POST', body:fd}, "json",{
					success:function(jsn){
						subBut.style.removeProperty('display');
						topRmf.SET(jsn.data.top);
						advRmf.SET(jsn.data.advHtml);
						metaRmf.SET(jsn.data.meta);
						scriptRmf.SET(jsn.data.scripts);
						imgRmf.SET(jsn.data.imgs);
						vidRmf.SET(jsn.data.vids);
						audRmf.SET(jsn.data.auds);
					},
					fail:function(){
						
					}
				}
			);
		}
		
	},
	title:"News Editor",
	urlEndpoint:"blog-news-editor",
	StartHistory:function(){return {view:"blog-news-editor"};},
	//homeButtonText:"News Editor",
	upButtonText:"News Blog List",
	upButtonView:"blog-news",
	//homeHeader:"Blog Editors"
},'blog-news-categoryEditor':{
	funct:function(a){
		mediaCatcher={imgs:[]};
		INPTYPES.blogImage=function(config){
			var cmpnd=this.compound(_ob.COMBINE(config,{
				inps:[
					{name:'name', labelText:'Name', type:'singleLine'},
					{name:'alt', labelText:'Alt', type:'singleLine'}, 
					{name:'ext', type:'hidden', value:''},
					{name:'slug', type:'hidden', value:''}
				]
			}));
			cmpnd.oldCOLL=cmpnd.COLL;
			var fileInp, previewCatcher;
			var hasChanged=false;
			var obUrl;
			_el.APPEND(cmpnd.inp, _el.CREATE('label','','',{},[
				fileInp=_el.CREATE('input','','',{type:'file', onchange:function(){
					hasChanged=true;
					_el.EMPTY(previewCatcher);
					if(obUrl){URL.revokeObjectURL(obUrl);}
					if(!this.files.length){return;}
					
					
					_el.APPEND(previewCatcher, _el.CREATE('img','','Blog-Editor-ImagePreview',{src:URL.createObjectURL(this.files[0])}));
				}, attributes:{accept:'image/*'}}),
				_el.CREATE('details','','',{},[_el.CREATE('summary','','',{},["Preview"]), previewCatcher=_el.CREATE('div','','',{},["No Preview Yet"])])
			]));
			cmpnd.COLL=function(){
				if(hasChanged && fileInp.files[0]){
					mediaCatcher.imgs.push({
						file:fileInp.files[0],
						mime:fileInp.files[0].type,
						name:cmpnd.oldCOLL().name,
						sub:'source'
					});
				}else{
					mediaCatcher.imgs.push(false);
				}
				return cmpnd.oldCOLL();
			}
			cmpnd.oldSET=cmpnd.SET;
			cmpnd.SET=function(v){
				cmpnd.oldSET(v);
				if(v.src){
					_el.EMPTY(previewCatcher);
					_el.APPEND(previewCatcher, _el.CREATE('img','','Blog-Editor-ImagePreview',{src:v.src}));
				}
				
			}
			return cmpnd;
		}
		var tar, comEl;
		_el.APPEND(a.GET_target(true),[
			comEl=_el.CREATE('div'),
			tar=_el.CREATE('div')
		]);
		
		
		var listRmf=RMFORM(tar, [
			{type:'dynamicList',name:'list', inpType:'compound', inpConfig:{inps:[
				{name:'name',labelText:'Name',type:'singleLine'},
				{name:'description', labelText:'Description', type:'paragraph'},
				{name:'shareImage', labelText:'Share Image', type:'blogImage'},
				{name:'pk', type:'hidden'}
			]}}
		],'categoryList', {
			collProc:function(c){
				var fd=new FormData();
				fd.append('dat', JSON.stringify(c));
				ElFetch(comEl,"Saving Category List", 
				"/adminTest/apires/blogs/news/saveCategories.php", 
				{method:'POST', body:fd}, "json",{
					success:function(j){
						SoftNotification.Render("Saved Successfully");
						var mod;
						var uploadInd=0;
						function NextUpload(){
							var med;
							
							while(uploadInd < mediaCatcher.imgs.length && !(med=mediaCatcher.imgs[uploadInd]))
							{
								uploadInd++;
							}
							
							if(!med){
								mod.CLOSE();
								VCR.main.CHANGE();
								return;
							}
							med.catInfo=j.catData[uploadInd];
							uploadInd++;
							med.type="Image";
							ElFetch(mod.client,"Getting Category List", 
								"/adminTest/apires/blogs/news/initMedia.php", 
								{method:'GET'}, "json",{
									success:function(v){
										ContinueUpload(med,v.uploadToken);
									},
									fail:function(v){}
								}
							);
						}
						function ContinueUpload(med, uploadToken){
							if(!med.chunkTracker){
								med.chunkTracker={
									fileSize:med.file.size,
									chunkSize:1024*1024,
									numChunks:Math.ceil(med.file.size/(1024*1024)),
									chunkIndex:0
								};
							}
							var offset=med.chunkTracker.chunkIndex*med.chunkTracker.chunkSize;
							var chunk=med.file.slice(offset,offset+med.chunkTracker.chunkSize);
							med.chunkTracker.chunkIndex++;
							var fd=new FormData();
							//fd.append('artPk',artPk);
							fd.append('mediaName', JSON.parse(med.catInfo.shareImage).slug);
							//fd.append('mediaSub', med.sub);
							fd.append('uploadToken', uploadToken);
							fd.append('dd', chunk);
							fd.append('categorySlug', med.catInfo.slug);
							fd.append('blogSection', 'category');
							fd.append('final', (med.chunkTracker.chunkIndex > med.chunkTracker.numChunks)?'1':'0');
							ElFetch(mod.client,"Uploading "+med.type+": "+med.name, 
								"/adminTest/apires/blogs/news/continueMedia.php", 
								{method:'POST', body:fd}, "text",{
									success:function(j){
										if(med.chunkTracker.chunkIndex > med.chunkTracker.numChunks){
											NextUpload();
										}else{
											ContinueUpload(med, uploadToken);
										}
									},
									fail:function(){
										SoftNotification.Render("Failed: Upload Aborted");
										mod.CLOSE();
									}
								}
							);
						}
						
						if(mediaCatcher.imgs.length){
							mod=BasicModal();
							
							NextUpload();
						}
						//VCR.main.CHANGE();
					},
					fail:function(){
						
					},
					overrideMsg:''
				}
			);
				
			}
		});
		listRmf.form.className+=" Blog-CategoryEditor-Form";
		ElFetch(comEl,"Getting Category List", 
			"/adminTest/apires/blogs/news/getCategoryList.php", 
			{method:'GET'}, "json",{
				success:function(j){
					listRmf.SET({list:j.data});
					
				},
				fail:function(){
					
				}
			}
		);
	},
	title:"News Category Editor",
	urlEndpoint:"blog-news-categoryEditor",
	StartHistory:function(){return {view:"blog-news-categoryEditor"};},
	//homeButtonText:"`--Admin-BlogEditorTitle--`",
	upButtonText:"News Blog List",
	upButtonView:"blog-news",
	//homeHeader:"Blog Editors"
},adminAccountSettings:{
	funct:function(a){
		var rmf=RMFORM(a.GET_target(true),RMF_reorder(INPTYPES_inpLists.TBL_WAArenderAdmin_memberspsEdit,["name","email","pass"]).concat({name:'passwordMatch', labelText:'Password Match', type:'singleLine'}),'adminSettings',{
			collProc:function(c){
				console.log(c);
				var fd=new FormData();
				fd.append('dat', JSON.stringify(c));
				SpecialFetch("/adminTest/apires/adminAccountSettings/updateSettings.php",{method:"POST", body:fd},"text", function(txt){
					alert("SUCCESS");
					delete c.pass;
					delete c.passwordMatch;
					delete c.OGvalue;
					USERDATA=c;
					VCR.main.CHANGE();
				}, "Editing Settings", null, rmf.form);
			}
			
		});
		rmf.SETforEdit(USERDATA);
	},
	title:"Your Admin Account Settings",
	urlEndpoint:"adminAccountSettings",
	StartHistory:function(){return {view:"adminAccountSettings"};},
	homeButtonText:"Your Admin Account Settings",
	upButtonText:"Home",
	upButtonView:"home",
	homeHeader:"Admin Account Managemenet"
}};`--AdminSuperViewData--`;
/*
So, view data is defined as this 
obj 
'viewName':{
	funct:function that is a view function,
	title: either a string or a function that calculates the title,
	urlEndpoint: a url enpoint to be concatenated to https://demo.greggoad.net/adminTest/,
	StartHistory: a function that accepts the top part of the url to act as data. 
	
OPTIONAL:
	homeButtonText:Text for the home button,
}
*/

function VC_BasicView(n){
	
	return function(a){
		var vd=VC_viewData;
		if(typeof VC_viewData[n].title === 'function'){
			_hist.documentTitle=VC_viewData[n].title();
		}else{_hist.documentTitle=VC_viewData[n].title;}
		_hist.url="https://demo.greggoad.net/adminTest/app/"+VC_viewData[n].urlEndpoint;
		
		document.querySelector("h1").innerHTML=_hist.documentTitle;
		
			var upButton=document.querySelector("#upButton");
		_el.EMPTY(upButton);
		upButton.onclick="";
		if(vd[n].upButtonText){
			upButton.innerHTML=vd[n].upButtonText
			upButton.onclick=function(){VCR.main.CHANGE(vd[n].upButtonView);}
		}
		
		VC_viewData[n].funct(a);
		
		if(!a.historyChange){document.documentElement.scrollTop=0;}
		
	}
}

VCR.main= new VC(function(){return document.querySelector('main');});

for(var mem in VC_viewData)
{
	VCR.main.REGISTER_view(mem, VC_BasicView(mem));
}

//`--VCR-Controlers-N-Views--`

if(!history.state || !history.state.VCR){
	var locSpl=location.href.replace('https://demo.greggoad.net/adminTest/app/','').replace('https://demo.greggoad.net/adminTest/app','').split("/");
	var locDat=[];
	for(var i=0; locSpl.length; locDat.unshift(locSpl.pop()))
	{
		var objHolder;
		var test=locSpl.join('/');
		if(!test){continue;}
		if(objHolder=Object.values(VC_viewData).find((f)=>{return f.urlEndpoint === test;})){
			history.replaceState({VCR:objHolder.StartHistory(locDat)}, '');
			continue;
		}
	}
}

// CORE
var el_body, el_html;
var sceenWidth, screenHeight;
function IGNITE(){
	el_body=document.getElementsByTagName("body")[0];
	el_html=document.getElementsByTagName("html")[0];
	
		screenWidth=el_html.clientWidth;
        screenHeight=el_html.clientHeight;
        window.onresize=function(){
			screenHeight=el_html.clientHeight;
			screenWidth=el_html.clientWidth;
        }
		_hist.GRAB_addr();
		VCR.main.CHANGE();
}
var INPTYPES_inpLists={"TBL_WAArenderContactForms_forms":[{"name":"formName","labelText":"Form Name","type":"string"},{"name":"inps","labelText":"Inps","type":"string"},{"name":"pk","labelText":"pk","type":"basicPk"}],"TBL_WAArenderContactForms_submissions":[{"name":"categoryState","labelText":"State","type":"string"},{"name":"dat","labelText":"Dat","type":"para"},{"name":"form","labelText":"Form Name","type":"string"},{"name":"ipAddress","labelText":"IP Address","type":"string"},{"name":"monthSubmitted","labelText":"Month Submitted","type":"integer"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"timeSubmitted","labelText":"Time Submitted","type":"date_time"},{"name":"yearSubmitted","labelText":"Year Submitted","type":"integer"}],"TBL_WAArenderContactForms_submissionspsAdd":[{"name":"categoryState","labelText":"State","type":"string"},{"name":"dat","labelText":"Dat","type":"para"},{"name":"form","labelText":"Form Name","type":"string"},{"name":"ipAddress","labelText":"IP Address","type":"string"},{"name":"monthSubmitted","labelText":"Month Submitted","type":"integer"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"timeSubmitted","labelText":"Time Submitted","type":"date_time"},{"name":"yearSubmitted","labelText":"Year Submitted","type":"integer"}],"TBL_WAArenderContactForms_submissionspsDrop":[{"name":"categoryState","labelText":"State","type":"string"},{"name":"dat","labelText":"Dat","type":"para"},{"name":"form","labelText":"Form Name","type":"string"},{"name":"ipAddress","labelText":"IP Address","type":"string"},{"name":"monthSubmitted","labelText":"Month Submitted","type":"integer"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"timeSubmitted","labelText":"Time Submitted","type":"date_time"},{"name":"yearSubmitted","labelText":"Year Submitted","type":"integer"}],"TBL_WAArenderContactForms_submissionspsEdit":[{"name":"OGvalue","type":"hidden"},{"name":"categoryState","labelText":"State","type":"string"},{"name":"dat","labelText":"Dat","type":"para"},{"name":"form","labelText":"Form Name","type":"string"},{"name":"ipAddress","labelText":"IP Address","type":"string"},{"name":"monthSubmitted","labelText":"Month Submitted","type":"integer"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"timeSubmitted","labelText":"Time Submitted","type":"date_time"},{"name":"yearSubmitted","labelText":"Year Submitted","type":"integer"}],"TBL_WAArenderContactForms_submissionspsGet":[],"TBL_WAArenderContactForms_submissionspsSearch":[{"name":"categoryState","labelText":"State","type":"string"},{"name":"dat","labelText":"Dat","type":"para"},{"name":"form","labelText":"Form Name","type":"string"},{"name":"ipAddress","labelText":"IP Address","type":"string"},{"name":"monthSubmitted","labelText":"Month Submitted","type":"integer"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"timeSubmitted","labelText":"Time Submitted","type":"date_time"},{"name":"yearSubmitted","labelText":"Year Submitted","type":"integer"}],"TBL_WAArenderBlog_categories":[{"name":"description","labelText":"Description","type":"para"},{"name":"name","labelText":"Name","type":"string"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"shareImage","labelText":"Share Image","type":"para"},{"name":"slug","labelText":"Slug","type":"string"}],"TBL_WAArenderBlog_categoriespsAdd":[{"name":"description","labelText":"Description","type":"para"},{"name":"name","labelText":"Name","type":"string"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"shareImage","labelText":"Share Image","type":"para"},{"name":"slug","labelText":"Slug","type":"string"}],"TBL_WAArenderBlog_categoriespsDrop":[{"name":"description","labelText":"Description","type":"para"},{"name":"name","labelText":"Name","type":"string"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"shareImage","labelText":"Share Image","type":"para"},{"name":"slug","labelText":"Slug","type":"string"}],"TBL_WAArenderBlog_categoriespsEdit":[{"name":"OGvalue","type":"hidden"},{"name":"description","labelText":"Description","type":"para"},{"name":"name","labelText":"Name","type":"string"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"shareImage","labelText":"Share Image","type":"para"},{"name":"slug","labelText":"Slug","type":"string"}],"TBL_WAArenderBlog_categoriespsGet":[],"TBL_WAArenderBlog_categoriespsSearch":[{"name":"description","labelText":"Description","type":"para"},{"name":"name","labelText":"Name","type":"string"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"shareImage","labelText":"Share Image","type":"para"},{"name":"slug","labelText":"Slug","type":"string"}],"TBL_WAArenderBlog_articles":[{"name":"article","labelText":"Article","type":"para"},{"name":"auds","labelText":"Auds","type":"para"},{"name":"css","labelText":"CSS","type":"para"},{"name":"igniter","labelText":"Igniter","type":"para"},{"name":"imgs","labelText":"Imgs","type":"para"},{"name":"js","labelText":"JS","type":"para"},{"name":"lastModified","labelText":"Last Modified","type":"date_time"},{"name":"meta","labelText":"Meta","type":"para"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"published","labelText":"Published","type":"boolean"},{"name":"scripts","labelText":"Scripts","type":"para"},{"name":"slug","labelText":"Slug","type":"string"},{"name":"sortDate","labelText":"Sort Date","type":"date_time"},{"name":"timePublished","labelText":"Time Published","type":"date_time"},{"name":"title","labelText":"Title","type":"string"},{"name":"vids","labelText":"Vids","type":"para"}],"TBL_WAArenderBlog_articlespsAdd":[{"name":"article","labelText":"Article","type":"para"},{"name":"auds","labelText":"Auds","type":"para"},{"name":"css","labelText":"CSS","type":"para"},{"name":"igniter","labelText":"Igniter","type":"para"},{"name":"imgs","labelText":"Imgs","type":"para"},{"name":"js","labelText":"JS","type":"para"},{"name":"lastModified","labelText":"Last Modified","type":"date_time"},{"name":"meta","labelText":"Meta","type":"para"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"published","labelText":"Published","type":"boolean"},{"name":"scripts","labelText":"Scripts","type":"para"},{"name":"slug","labelText":"Slug","type":"string"},{"name":"sortDate","labelText":"Sort Date","type":"date_time"},{"name":"timePublished","labelText":"Time Published","type":"date_time"},{"name":"title","labelText":"Title","type":"string"},{"name":"vids","labelText":"Vids","type":"para"}],"TBL_WAArenderBlog_articlespsDrop":[{"name":"article","labelText":"Article","type":"para"},{"name":"auds","labelText":"Auds","type":"para"},{"name":"css","labelText":"CSS","type":"para"},{"name":"igniter","labelText":"Igniter","type":"para"},{"name":"imgs","labelText":"Imgs","type":"para"},{"name":"js","labelText":"JS","type":"para"},{"name":"lastModified","labelText":"Last Modified","type":"date_time"},{"name":"meta","labelText":"Meta","type":"para"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"published","labelText":"Published","type":"boolean"},{"name":"scripts","labelText":"Scripts","type":"para"},{"name":"slug","labelText":"Slug","type":"string"},{"name":"sortDate","labelText":"Sort Date","type":"date_time"},{"name":"timePublished","labelText":"Time Published","type":"date_time"},{"name":"title","labelText":"Title","type":"string"},{"name":"vids","labelText":"Vids","type":"para"}],"TBL_WAArenderBlog_articlespsEdit":[{"name":"OGvalue","type":"hidden"},{"name":"article","labelText":"Article","type":"para"},{"name":"auds","labelText":"Auds","type":"para"},{"name":"css","labelText":"CSS","type":"para"},{"name":"igniter","labelText":"Igniter","type":"para"},{"name":"imgs","labelText":"Imgs","type":"para"},{"name":"js","labelText":"JS","type":"para"},{"name":"lastModified","labelText":"Last Modified","type":"date_time"},{"name":"meta","labelText":"Meta","type":"para"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"published","labelText":"Published","type":"boolean"},{"name":"scripts","labelText":"Scripts","type":"para"},{"name":"slug","labelText":"Slug","type":"string"},{"name":"sortDate","labelText":"Sort Date","type":"date_time"},{"name":"timePublished","labelText":"Time Published","type":"date_time"},{"name":"title","labelText":"Title","type":"string"},{"name":"vids","labelText":"Vids","type":"para"}],"TBL_WAArenderBlog_articlespsGet":[],"TBL_WAArenderBlog_articlespsSearch":[{"name":"article","labelText":"Article","type":"para"},{"name":"auds","labelText":"Auds","type":"para"},{"name":"css","labelText":"CSS","type":"para"},{"name":"igniter","labelText":"Igniter","type":"para"},{"name":"imgs","labelText":"Imgs","type":"para"},{"name":"js","labelText":"JS","type":"para"},{"name":"lastModified","labelText":"Last Modified","type":"date_time"},{"name":"meta","labelText":"Meta","type":"para"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"published","labelText":"Published","type":"boolean"},{"name":"scripts","labelText":"Scripts","type":"para"},{"name":"slug","labelText":"Slug","type":"string"},{"name":"sortDate","labelText":"Sort Date","type":"date_time"},{"name":"timePublished","labelText":"Time Published","type":"date_time"},{"name":"title","labelText":"Title","type":"string"},{"name":"vids","labelText":"Vids","type":"para"}],"TBL_WAArenderBlog_categoryTies":[{"name":"article","labelText":"Article","type":"tableSearch","typeName":"TBL_WAArenderBlog_articles","searchFile":"php_core\/globalSearch.php?typeName=TBL_WAArenderBlog_articles"},{"name":"category","labelText":"Category","type":"tableSearch","typeName":"TBL_WAArenderBlog_categories","searchFile":"php_core\/globalSearch.php?typeName=TBL_WAArenderBlog_categories"},{"name":"pk","labelText":"pk","type":"basicPk"}],"TBL_WAArenderBlog_categoryTiespsAdd":[{"name":"article","type":"tableSearch","labelText":"Article","typeName":"TBL_WAArenderBlog_articles","apName":"","searchFile":"","includeAdd":true,"addApName":"","addFile":""},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"category","type":"tableSearch","labelText":"Category","typeName":"TBL_WAArenderBlog_categories","apName":"","searchFile":"","includeAdd":true,"addApName":"","addFile":""}],"TBL_WAArenderBlog_categoryTiespsDrop":[{"name":"article","type":"tableSearch","labelText":"Article","typeName":"TBL_WAArenderBlog_articles","apName":"","searchFile":""},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"category","type":"tableSearch","labelText":"Category","typeName":"TBL_WAArenderBlog_categories","apName":"","searchFile":""}],"TBL_WAArenderBlog_categoryTiespsEdit":[{"name":"OGvalue","type":"hidden"},{"name":"article","type":"tableSearch","labelText":"Article","typeName":"TBL_WAArenderBlog_articles","apName":"","searchFile":"","includeAdd":true,"addApName":"","addFile":""},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"category","type":"tableSearch","labelText":"Category","typeName":"TBL_WAArenderBlog_categories","apName":"","searchFile":"","includeAdd":true,"addApName":"","addFile":""}],"TBL_WAArenderBlog_categoryTiespsGet":[],"TBL_WAArenderBlog_categoryTiespsSearch":[{"name":"article","type":"tableSearch","labelText":"Article","typeName":"TBL_WAArenderBlog_articles","apName":"","searchFile":""},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"category","type":"tableSearch","labelText":"Category","typeName":"TBL_WAArenderBlog_categories","apName":"","searchFile":""}]};

INPTYPES.TBL_WAArenderContactForms_forms=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderContactForms_forms, '');
INPTYPES.TBL_WAArenderContactForms_submissions=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderContactForms_submissions, '');
INPTYPES.TBL_WAArenderContactForms_submissionspsAdd=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderContactForms_submissionspsAdd, '');
INPTYPES.TBL_WAArenderContactForms_submissionspsDrop=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderContactForms_submissionspsDrop, '');
INPTYPES.TBL_WAArenderContactForms_submissionspsEdit=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderContactForms_submissionspsEdit, '');
INPTYPES.TBL_WAArenderContactForms_submissionspsGet=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderContactForms_submissionspsGet, '');
INPTYPES.TBL_WAArenderContactForms_submissionspsSearch=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderContactForms_submissionspsSearch, '');
INPTYPES.TBL_WAArenderBlog_categories=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categories, '');
INPTYPES.TBL_WAArenderBlog_categoriespsAdd=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoriespsAdd, '');
INPTYPES.TBL_WAArenderBlog_categoriespsDrop=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoriespsDrop, '');
INPTYPES.TBL_WAArenderBlog_categoriespsEdit=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoriespsEdit, '');
INPTYPES.TBL_WAArenderBlog_categoriespsGet=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoriespsGet, '');
INPTYPES.TBL_WAArenderBlog_categoriespsSearch=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoriespsSearch, '');
INPTYPES.TBL_WAArenderBlog_articles=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_articles, '');
INPTYPES.TBL_WAArenderBlog_articlespsAdd=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_articlespsAdd, '');
INPTYPES.TBL_WAArenderBlog_articlespsDrop=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_articlespsDrop, '');
INPTYPES.TBL_WAArenderBlog_articlespsEdit=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_articlespsEdit, '');
INPTYPES.TBL_WAArenderBlog_articlespsGet=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_articlespsGet, '');
INPTYPES.TBL_WAArenderBlog_articlespsSearch=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_articlespsSearch, '');
INPTYPES.TBL_WAArenderBlog_categoryTies=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoryTies, '');
INPTYPES.TBL_WAArenderBlog_categoryTiespsAdd=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoryTiespsAdd, '');
INPTYPES.TBL_WAArenderBlog_categoryTiespsDrop=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoryTiespsDrop, '');
INPTYPES.TBL_WAArenderBlog_categoryTiespsEdit=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoryTiespsEdit, '');
INPTYPES.TBL_WAArenderBlog_categoryTiespsGet=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoryTiespsGet, '');
INPTYPES.TBL_WAArenderBlog_categoryTiespsSearch=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoryTiespsSearch, '');
INPTYPES.para=RMFbasicInput('', '', function(){
	return this.inp.value;
}, '', function(config, ret){
	RMF_extractForExtension(ret,this.paragraph(config));
}, 'label');
INPTYPES.date_time=RMFbasicInput('', '', function(){
   var temp=this.ts_all_inps.COLL();
   
   var ret= temp.year+"-"+temp.month+"-"+temp.day+" "+temp.hours+":"+temp.minutes+":"+temp.seconds;

   if(temp.microSeconds !== ''){
      ret+="."+ret.microSeconds;
   }
   if(ret === '-- ::'){return '';}
   return ret;
   
}, function(v){
   if(!v || v === ''){return;}
   var datTim=v.split(' ');
   var datSpl=datTim[0].split('-');
   var timMic=datTim[1].split('.');
   var timSpl=timMic[0].split(':');
   this.ts_all_inps.SET({
      year:datSpl[0],
      month:datSpl[1],
      day:datSpl[2],
      hours:timSpl[0],
      minutes:timSpl[1],
      seconds:timSpl[2],
      microSeconds:timMic[1]
   });
}, function(config, ret){
   
   ret.ts_all_inps=this.compound(_object.COMBINE(config,{
       inps:[
         {
            name:'year',
            placeHolder:'yyyy',
            type:'singleLine'
         },
         {
            type:'span',
            text:'-'
         },
         {
            name:'month',
            placeHolder:'mm',
            type:'singleLine'
         },
         {
            type:'span',
            text:'-'
         },
         {
            name:'day',
            placeHolder:'dd',
            type:'singleLine'
         },
         {
            type:'span',
            text:' '
         },
         {
            name:'hours',
            placeHolder:'hh',
            type:'singleLine'
         },
         {
            type:'span',
            text:':'
         },
         {
            name:'minutes',
            placeHolder:'mm',
            type:'singleLine'
         },
         {
            type:'span',
            text:':'
         },
         {
            name:'seconds',
            placeHolder:'ss',
            type:'singleLine'
         },
         {
            type:'span',
            text:'.'
         },
         {
            name:'microSeconds',
            placeHolder:'------',
            type:'singleLine'
         },
       ]
   }));
   ret.el=ret.ts_all_inps.el;
   ret.inp=ret.ts_all_inps.inp;
   ret.ts_all_inps.inp.addEventListener('change', function(){
      
   });
}, 'label');
INPTYPES.basicPk=RMFbasicInput('', '', function(){
   var v=parseInt(this.inp.value);
   if(isNaN(v) || v<=0 || v>4294967295){
      return '';
   }
	return v;
}, '', function(config, ret){
	RMF_extractForExtension(ret,this.singleLine(config));
   ret.inp.addEventListener("change", function(){
      var v=this.value;
       if(isNaN(v) || v<=0 || v>4294967295){
         return '';
       }
   });
}, 'label');
INPTYPES.boolean=RMFbasicInput('', '', function(){
	return this.inp.checked;
   
}, function(v){
   this.inp.checked=parseInt(v) || 0;
}, function(config, ret){
	RMF_extractForExtension(ret,this.checkbox(config));
     ret.SET=function(v){
        this.inp.checked=!!parseInt(v);
     }
     
}, 'label');
INPTYPES.string=RMFbasicInput('', '', function(){
        if(this.inp.value.length > 254){
           this.inp.value=this.inp.value.slice(0, 253);
        } 
	return this.inp.value;
}, '', function(config, ret){
	RMF_extractForExtension(ret,this.singleLine(config));
    ret.inp.addEventListener('change', function(){
        this.value=this.value.slice(0, 253);
    });
}, 'label');
INPTYPES.integer=RMFbasicInput('', '', function(){
   var v=parseInt(this.inp.value);
   if(isNaN(v) || v>2147483647){return '';}
	return v;
}, '', function(config, ret){
	RMF_extractForExtension(ret,this.singleLine(config));
   ret.inp.addEventListener('change', function(){
      var v=parseInt(this.value);
      if(isNaN(v) || v> 2147483647){this.value='';}
   });
}, 'label');
var INPTYPES_inpLists={"TBL_WAArenderAdmin_members":[{"name":"email","labelText":"Email","type":"string"},{"name":"name","labelText":"Name","type":"string"},{"name":"pass","labelText":"Pass","type":"string"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"role","labelText":"Role","type":"string"}],"TBL_WAArenderAdmin_memberspsAdd":[{"name":"email","labelText":"Email","type":"string"},{"name":"name","labelText":"Name","type":"string"},{"name":"pass","labelText":"Pass","type":"string"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"role","labelText":"Role","type":"string"}],"TBL_WAArenderAdmin_memberspsDrop":[{"name":"email","labelText":"Email","type":"string"},{"name":"name","labelText":"Name","type":"string"},{"name":"pass","labelText":"Pass","type":"string"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"role","labelText":"Role","type":"string"}],"TBL_WAArenderAdmin_memberspsEdit":[{"name":"OGvalue","type":"hidden"},{"name":"email","labelText":"Email","type":"string"},{"name":"name","labelText":"Name","type":"string"},{"name":"pass","labelText":"Pass","type":"string"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"role","labelText":"Role","type":"string"}],"TBL_WAArenderAdmin_memberspsGet":[],"TBL_WAArenderAdmin_memberspsSearch":[{"name":"email","labelText":"Email","type":"string"},{"name":"name","labelText":"Name","type":"string"},{"name":"pass","labelText":"Pass","type":"string"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"role","labelText":"Role","type":"string"}],"TBL_WAArenderAdmin_passwordRecoveryRequests":[{"name":"member","labelText":"Member","type":"tableSearch","typeName":"TBL_WAArenderAdmin_members","searchFile":"php_core\/globalSearch.php?typeName=TBL_WAArenderAdmin_members"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"timeAdded","labelText":"Time Added","type":"date_time"},{"name":"token","labelText":"Token","type":"string"}],"TBL_WAArenderAdmin_passwordRecoveryRequestspsAdd":[{"name":"member","type":"tableSearch","labelText":"Member","typeName":"TBL_WAArenderAdmin_members","apName":"psSearch","searchFile":"","includeAdd":true,"addApName":"psAdd","addFile":""},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"timeAdded","labelText":"Time Added","type":"date_time"},{"name":"token","labelText":"Token","type":"string"}],"TBL_WAArenderAdmin_passwordRecoveryRequestspsDrop":[{"name":"member","type":"tableSearch","labelText":"Member","typeName":"TBL_WAArenderAdmin_members","apName":"psSearch","searchFile":""},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"timeAdded","labelText":"Time Added","type":"date_time"},{"name":"token","labelText":"Token","type":"string"}],"TBL_WAArenderAdmin_passwordRecoveryRequestspsEdit":[{"name":"OGvalue","type":"hidden"},{"name":"member","type":"tableSearch","labelText":"Member","typeName":"TBL_WAArenderAdmin_members","apName":"psSearch","searchFile":"","includeAdd":true,"addApName":"psAdd","addFile":""},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"timeAdded","labelText":"Time Added","type":"date_time"},{"name":"token","labelText":"Token","type":"string"}],"TBL_WAArenderAdmin_passwordRecoveryRequestspsGet":[],"TBL_WAArenderAdmin_passwordRecoveryRequestspsSearch":[{"name":"member","type":"tableSearch","labelText":"Member","typeName":"TBL_WAArenderAdmin_members","apName":"psSearch","searchFile":""},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"timeAdded","labelText":"Time Added","type":"date_time"},{"name":"token","labelText":"Token","type":"string"}],"TBL_WAArenderAdmin_loginAttempts":[{"name":"email","labelText":"Email","type":"string"},{"name":"ip","labelText":"IP","type":"string"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"res","labelText":"Result","type":"boolean"},{"name":"timeAttempted","labelText":"Time Attempted","type":"date_time"}],"TBL_WAArenderAdmin_loginAttemptspsAdd":[{"name":"timeAttempted","labelText":"Time Attempted","type":"date_time"},{"name":"res","labelText":"Result","type":"boolean"},{"name":"email","labelText":"Email","type":"string"},{"name":"ip","labelText":"IP","type":"string"}],"TBL_WAArenderAdmin_loginAttemptspsDrop":[{"name":"timeAttempted","labelText":"Time Attempted","type":"date_time"},{"name":"res","labelText":"Result","type":"boolean"},{"name":"email","labelText":"Email","type":"string"},{"name":"ip","labelText":"IP","type":"string"}],"TBL_WAArenderAdmin_loginAttemptspsEdit":[{"name":"OGvalue","type":"hidden"},{"name":"timeAttempted","labelText":"Time Attempted","type":"date_time"},{"name":"res","labelText":"Result","type":"boolean"},{"name":"email","labelText":"Email","type":"string"},{"name":"ip","labelText":"IP","type":"string"}],"TBL_WAArenderAdmin_loginAttemptspsGet":[],"TBL_WAArenderAdmin_loginAttemptspsSearch":[{"name":"timeAttempted","labelText":"Time Attempted","type":"date_time"},{"name":"res","labelText":"Result","type":"boolean"},{"name":"email","labelText":"Email","type":"string"},{"name":"ip","labelText":"IP","type":"string"}],"TBL_WAArenderAdmin_passwordRecoveryCaptures":[{"name":"captureToken","labelText":"Capture Token","type":"string"},{"name":"member","labelText":"Member","type":"tableSearch","typeName":"TBL_WAArenderAdmin_members","searchFile":"php_core\/globalSearch.php?typeName=TBL_WAArenderAdmin_members"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"timeAdded","labelText":"Time Added","type":"date_time"},{"name":"token","labelText":"Token","type":"string"}],"TBL_WAArenderAdmin_passwordRecoveryCapturespsAdd":[{"name":"token","labelText":"Token","type":"string"},{"name":"captureToken","labelText":"Capture Token","type":"string"},{"name":"timeAdded","labelText":"Time Added","type":"date_time"},{"name":"member","type":"tableSearch","labelText":"Member","typeName":"TBL_WAArenderAdmin_members","apName":"psSearch","searchFile":"","includeAdd":true,"addApName":"psAdd","addFile":""},{"name":"pk","labelText":"pk","type":"basicPk"}],"TBL_WAArenderAdmin_passwordRecoveryCapturespsDrop":[{"name":"token","labelText":"Token","type":"string"},{"name":"captureToken","labelText":"Capture Token","type":"string"},{"name":"timeAdded","labelText":"Time Added","type":"date_time"},{"name":"member","type":"tableSearch","labelText":"Member","typeName":"TBL_WAArenderAdmin_members","apName":"psSearch","searchFile":""},{"name":"pk","labelText":"pk","type":"basicPk"}],"TBL_WAArenderAdmin_passwordRecoveryCapturespsEdit":[{"name":"OGvalue","type":"hidden"},{"name":"token","labelText":"Token","type":"string"},{"name":"captureToken","labelText":"Capture Token","type":"string"},{"name":"timeAdded","labelText":"Time Added","type":"date_time"},{"name":"member","type":"tableSearch","labelText":"Member","typeName":"TBL_WAArenderAdmin_members","apName":"psSearch","searchFile":"","includeAdd":true,"addApName":"psAdd","addFile":""},{"name":"pk","labelText":"pk","type":"basicPk"}],"TBL_WAArenderAdmin_passwordRecoveryCapturespsGet":[],"TBL_WAArenderAdmin_passwordRecoveryCapturespsSearch":[{"name":"token","labelText":"Token","type":"string"},{"name":"captureToken","labelText":"Capture Token","type":"string"},{"name":"timeAdded","labelText":"Time Added","type":"date_time"},{"name":"member","type":"tableSearch","labelText":"Member","typeName":"TBL_WAArenderAdmin_members","apName":"psSearch","searchFile":""},{"name":"pk","labelText":"pk","type":"basicPk"}],"TBL_WAArenderContactForms_forms":[{"name":"formName","labelText":"Form Name","type":"string"},{"name":"inps","labelText":"Inps","type":"string"},{"name":"pk","labelText":"pk","type":"basicPk"}],"TBL_WAArenderContactForms_submissions":[{"name":"categoryState","labelText":"State","type":"string"},{"name":"dat","labelText":"Dat","type":"para"},{"name":"form","labelText":"Form Name","type":"string"},{"name":"ipAddress","labelText":"IP Address","type":"string"},{"name":"monthSubmitted","labelText":"Month Submitted","type":"integer"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"timeSubmitted","labelText":"Time Submitted","type":"date_time"},{"name":"yearSubmitted","labelText":"Year Submitted","type":"integer"}],"TBL_WAArenderContactForms_submissionspsAdd":[{"name":"categoryState","labelText":"State","type":"string"},{"name":"dat","labelText":"Dat","type":"para"},{"name":"form","labelText":"Form Name","type":"string"},{"name":"ipAddress","labelText":"IP Address","type":"string"},{"name":"monthSubmitted","labelText":"Month Submitted","type":"integer"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"timeSubmitted","labelText":"Time Submitted","type":"date_time"},{"name":"yearSubmitted","labelText":"Year Submitted","type":"integer"}],"TBL_WAArenderContactForms_submissionspsDrop":[{"name":"categoryState","labelText":"State","type":"string"},{"name":"dat","labelText":"Dat","type":"para"},{"name":"form","labelText":"Form Name","type":"string"},{"name":"ipAddress","labelText":"IP Address","type":"string"},{"name":"monthSubmitted","labelText":"Month Submitted","type":"integer"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"timeSubmitted","labelText":"Time Submitted","type":"date_time"},{"name":"yearSubmitted","labelText":"Year Submitted","type":"integer"}],"TBL_WAArenderContactForms_submissionspsEdit":[{"name":"OGvalue","type":"hidden"},{"name":"categoryState","labelText":"State","type":"string"},{"name":"dat","labelText":"Dat","type":"para"},{"name":"form","labelText":"Form Name","type":"string"},{"name":"ipAddress","labelText":"IP Address","type":"string"},{"name":"monthSubmitted","labelText":"Month Submitted","type":"integer"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"timeSubmitted","labelText":"Time Submitted","type":"date_time"},{"name":"yearSubmitted","labelText":"Year Submitted","type":"integer"}],"TBL_WAArenderContactForms_submissionspsGet":[],"TBL_WAArenderContactForms_submissionspsSearch":[{"name":"categoryState","labelText":"State","type":"string"},{"name":"dat","labelText":"Dat","type":"para"},{"name":"form","labelText":"Form Name","type":"string"},{"name":"ipAddress","labelText":"IP Address","type":"string"},{"name":"monthSubmitted","labelText":"Month Submitted","type":"integer"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"timeSubmitted","labelText":"Time Submitted","type":"date_time"},{"name":"yearSubmitted","labelText":"Year Submitted","type":"integer"}],"TBL_WAArenderBlog_categories":[{"name":"description","labelText":"Description","type":"para"},{"name":"name","labelText":"Name","type":"string"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"shareImage","labelText":"Share Image","type":"para"},{"name":"slug","labelText":"Slug","type":"string"}],"TBL_WAArenderBlog_categoriespsAdd":[{"name":"description","labelText":"Description","type":"para"},{"name":"name","labelText":"Name","type":"string"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"shareImage","labelText":"Share Image","type":"para"},{"name":"slug","labelText":"Slug","type":"string"}],"TBL_WAArenderBlog_categoriespsDrop":[{"name":"description","labelText":"Description","type":"para"},{"name":"name","labelText":"Name","type":"string"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"shareImage","labelText":"Share Image","type":"para"},{"name":"slug","labelText":"Slug","type":"string"}],"TBL_WAArenderBlog_categoriespsEdit":[{"name":"OGvalue","type":"hidden"},{"name":"description","labelText":"Description","type":"para"},{"name":"name","labelText":"Name","type":"string"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"shareImage","labelText":"Share Image","type":"para"},{"name":"slug","labelText":"Slug","type":"string"}],"TBL_WAArenderBlog_categoriespsGet":[],"TBL_WAArenderBlog_categoriespsSearch":[{"name":"description","labelText":"Description","type":"para"},{"name":"name","labelText":"Name","type":"string"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"shareImage","labelText":"Share Image","type":"para"},{"name":"slug","labelText":"Slug","type":"string"}],"TBL_WAArenderBlog_articles":[{"name":"article","labelText":"Article","type":"para"},{"name":"auds","labelText":"Auds","type":"para"},{"name":"css","labelText":"CSS","type":"para"},{"name":"igniter","labelText":"Igniter","type":"para"},{"name":"imgs","labelText":"Imgs","type":"para"},{"name":"js","labelText":"JS","type":"para"},{"name":"lastModified","labelText":"Last Modified","type":"date_time"},{"name":"meta","labelText":"Meta","type":"para"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"published","labelText":"Published","type":"boolean"},{"name":"scripts","labelText":"Scripts","type":"para"},{"name":"slug","labelText":"Slug","type":"string"},{"name":"sortDate","labelText":"Sort Date","type":"date_time"},{"name":"timePublished","labelText":"Time Published","type":"date_time"},{"name":"title","labelText":"Title","type":"string"},{"name":"vids","labelText":"Vids","type":"para"}],"TBL_WAArenderBlog_articlespsAdd":[{"name":"article","labelText":"Article","type":"para"},{"name":"auds","labelText":"Auds","type":"para"},{"name":"css","labelText":"CSS","type":"para"},{"name":"igniter","labelText":"Igniter","type":"para"},{"name":"imgs","labelText":"Imgs","type":"para"},{"name":"js","labelText":"JS","type":"para"},{"name":"lastModified","labelText":"Last Modified","type":"date_time"},{"name":"meta","labelText":"Meta","type":"para"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"published","labelText":"Published","type":"boolean"},{"name":"scripts","labelText":"Scripts","type":"para"},{"name":"slug","labelText":"Slug","type":"string"},{"name":"sortDate","labelText":"Sort Date","type":"date_time"},{"name":"timePublished","labelText":"Time Published","type":"date_time"},{"name":"title","labelText":"Title","type":"string"},{"name":"vids","labelText":"Vids","type":"para"}],"TBL_WAArenderBlog_articlespsDrop":[{"name":"article","labelText":"Article","type":"para"},{"name":"auds","labelText":"Auds","type":"para"},{"name":"css","labelText":"CSS","type":"para"},{"name":"igniter","labelText":"Igniter","type":"para"},{"name":"imgs","labelText":"Imgs","type":"para"},{"name":"js","labelText":"JS","type":"para"},{"name":"lastModified","labelText":"Last Modified","type":"date_time"},{"name":"meta","labelText":"Meta","type":"para"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"published","labelText":"Published","type":"boolean"},{"name":"scripts","labelText":"Scripts","type":"para"},{"name":"slug","labelText":"Slug","type":"string"},{"name":"sortDate","labelText":"Sort Date","type":"date_time"},{"name":"timePublished","labelText":"Time Published","type":"date_time"},{"name":"title","labelText":"Title","type":"string"},{"name":"vids","labelText":"Vids","type":"para"}],"TBL_WAArenderBlog_articlespsEdit":[{"name":"OGvalue","type":"hidden"},{"name":"article","labelText":"Article","type":"para"},{"name":"auds","labelText":"Auds","type":"para"},{"name":"css","labelText":"CSS","type":"para"},{"name":"igniter","labelText":"Igniter","type":"para"},{"name":"imgs","labelText":"Imgs","type":"para"},{"name":"js","labelText":"JS","type":"para"},{"name":"lastModified","labelText":"Last Modified","type":"date_time"},{"name":"meta","labelText":"Meta","type":"para"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"published","labelText":"Published","type":"boolean"},{"name":"scripts","labelText":"Scripts","type":"para"},{"name":"slug","labelText":"Slug","type":"string"},{"name":"sortDate","labelText":"Sort Date","type":"date_time"},{"name":"timePublished","labelText":"Time Published","type":"date_time"},{"name":"title","labelText":"Title","type":"string"},{"name":"vids","labelText":"Vids","type":"para"}],"TBL_WAArenderBlog_articlespsGet":[],"TBL_WAArenderBlog_articlespsSearch":[{"name":"article","labelText":"Article","type":"para"},{"name":"auds","labelText":"Auds","type":"para"},{"name":"css","labelText":"CSS","type":"para"},{"name":"igniter","labelText":"Igniter","type":"para"},{"name":"imgs","labelText":"Imgs","type":"para"},{"name":"js","labelText":"JS","type":"para"},{"name":"lastModified","labelText":"Last Modified","type":"date_time"},{"name":"meta","labelText":"Meta","type":"para"},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"published","labelText":"Published","type":"boolean"},{"name":"scripts","labelText":"Scripts","type":"para"},{"name":"slug","labelText":"Slug","type":"string"},{"name":"sortDate","labelText":"Sort Date","type":"date_time"},{"name":"timePublished","labelText":"Time Published","type":"date_time"},{"name":"title","labelText":"Title","type":"string"},{"name":"vids","labelText":"Vids","type":"para"}],"TBL_WAArenderBlog_categoryTies":[{"name":"article","labelText":"Article","type":"tableSearch","typeName":"TBL_WAArenderBlog_articles","searchFile":"php_core\/globalSearch.php?typeName=TBL_WAArenderBlog_articles"},{"name":"category","labelText":"Category","type":"tableSearch","typeName":"TBL_WAArenderBlog_categories","searchFile":"php_core\/globalSearch.php?typeName=TBL_WAArenderBlog_categories"},{"name":"pk","labelText":"pk","type":"basicPk"}],"TBL_WAArenderBlog_categoryTiespsAdd":[{"name":"article","type":"tableSearch","labelText":"Article","typeName":"TBL_WAArenderBlog_articles","apName":"","searchFile":"","includeAdd":true,"addApName":"","addFile":""},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"category","type":"tableSearch","labelText":"Category","typeName":"TBL_WAArenderBlog_categories","apName":"","searchFile":"","includeAdd":true,"addApName":"","addFile":""}],"TBL_WAArenderBlog_categoryTiespsDrop":[{"name":"article","type":"tableSearch","labelText":"Article","typeName":"TBL_WAArenderBlog_articles","apName":"","searchFile":""},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"category","type":"tableSearch","labelText":"Category","typeName":"TBL_WAArenderBlog_categories","apName":"","searchFile":""}],"TBL_WAArenderBlog_categoryTiespsEdit":[{"name":"OGvalue","type":"hidden"},{"name":"article","type":"tableSearch","labelText":"Article","typeName":"TBL_WAArenderBlog_articles","apName":"","searchFile":"","includeAdd":true,"addApName":"","addFile":""},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"category","type":"tableSearch","labelText":"Category","typeName":"TBL_WAArenderBlog_categories","apName":"","searchFile":"","includeAdd":true,"addApName":"","addFile":""}],"TBL_WAArenderBlog_categoryTiespsGet":[],"TBL_WAArenderBlog_categoryTiespsSearch":[{"name":"article","type":"tableSearch","labelText":"Article","typeName":"TBL_WAArenderBlog_articles","apName":"","searchFile":""},{"name":"pk","labelText":"pk","type":"basicPk"},{"name":"category","type":"tableSearch","labelText":"Category","typeName":"TBL_WAArenderBlog_categories","apName":"","searchFile":""}]};

INPTYPES.TBL_WAArenderAdmin_members=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_members, '');
INPTYPES.TBL_WAArenderAdmin_memberspsAdd=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_memberspsAdd, '');
INPTYPES.TBL_WAArenderAdmin_memberspsDrop=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_memberspsDrop, '');
INPTYPES.TBL_WAArenderAdmin_memberspsEdit=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_memberspsEdit, '');
INPTYPES.TBL_WAArenderAdmin_memberspsGet=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_memberspsGet, '');
INPTYPES.TBL_WAArenderAdmin_memberspsSearch=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_memberspsSearch, '');
INPTYPES.TBL_WAArenderAdmin_passwordRecoveryRequests=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_passwordRecoveryRequests, '');
INPTYPES.TBL_WAArenderAdmin_passwordRecoveryRequestspsAdd=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_passwordRecoveryRequestspsAdd, '');
INPTYPES.TBL_WAArenderAdmin_passwordRecoveryRequestspsDrop=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_passwordRecoveryRequestspsDrop, '');
INPTYPES.TBL_WAArenderAdmin_passwordRecoveryRequestspsEdit=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_passwordRecoveryRequestspsEdit, '');
INPTYPES.TBL_WAArenderAdmin_passwordRecoveryRequestspsGet=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_passwordRecoveryRequestspsGet, '');
INPTYPES.TBL_WAArenderAdmin_passwordRecoveryRequestspsSearch=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_passwordRecoveryRequestspsSearch, '');
INPTYPES.TBL_WAArenderAdmin_loginAttempts=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_loginAttempts, '');
INPTYPES.TBL_WAArenderAdmin_loginAttemptspsAdd=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_loginAttemptspsAdd, '');
INPTYPES.TBL_WAArenderAdmin_loginAttemptspsDrop=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_loginAttemptspsDrop, '');
INPTYPES.TBL_WAArenderAdmin_loginAttemptspsEdit=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_loginAttemptspsEdit, '');
INPTYPES.TBL_WAArenderAdmin_loginAttemptspsGet=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_loginAttemptspsGet, '');
INPTYPES.TBL_WAArenderAdmin_loginAttemptspsSearch=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_loginAttemptspsSearch, '');
INPTYPES.TBL_WAArenderAdmin_passwordRecoveryCaptures=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_passwordRecoveryCaptures, '');
INPTYPES.TBL_WAArenderAdmin_passwordRecoveryCapturespsAdd=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_passwordRecoveryCapturespsAdd, '');
INPTYPES.TBL_WAArenderAdmin_passwordRecoveryCapturespsDrop=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_passwordRecoveryCapturespsDrop, '');
INPTYPES.TBL_WAArenderAdmin_passwordRecoveryCapturespsEdit=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_passwordRecoveryCapturespsEdit, '');
INPTYPES.TBL_WAArenderAdmin_passwordRecoveryCapturespsGet=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_passwordRecoveryCapturespsGet, '');
INPTYPES.TBL_WAArenderAdmin_passwordRecoveryCapturespsSearch=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderAdmin_passwordRecoveryCapturespsSearch, '');
INPTYPES.TBL_WAArenderContactForms_forms=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderContactForms_forms, '');
INPTYPES.TBL_WAArenderContactForms_submissions=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderContactForms_submissions, '');
INPTYPES.TBL_WAArenderContactForms_submissionspsAdd=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderContactForms_submissionspsAdd, '');
INPTYPES.TBL_WAArenderContactForms_submissionspsDrop=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderContactForms_submissionspsDrop, '');
INPTYPES.TBL_WAArenderContactForms_submissionspsEdit=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderContactForms_submissionspsEdit, '');
INPTYPES.TBL_WAArenderContactForms_submissionspsGet=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderContactForms_submissionspsGet, '');
INPTYPES.TBL_WAArenderContactForms_submissionspsSearch=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderContactForms_submissionspsSearch, '');
INPTYPES.TBL_WAArenderBlog_categories=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categories, '');
INPTYPES.TBL_WAArenderBlog_categoriespsAdd=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoriespsAdd, '');
INPTYPES.TBL_WAArenderBlog_categoriespsDrop=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoriespsDrop, '');
INPTYPES.TBL_WAArenderBlog_categoriespsEdit=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoriespsEdit, '');
INPTYPES.TBL_WAArenderBlog_categoriespsGet=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoriespsGet, '');
INPTYPES.TBL_WAArenderBlog_categoriespsSearch=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoriespsSearch, '');
INPTYPES.TBL_WAArenderBlog_articles=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_articles, '');
INPTYPES.TBL_WAArenderBlog_articlespsAdd=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_articlespsAdd, '');
INPTYPES.TBL_WAArenderBlog_articlespsDrop=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_articlespsDrop, '');
INPTYPES.TBL_WAArenderBlog_articlespsEdit=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_articlespsEdit, '');
INPTYPES.TBL_WAArenderBlog_articlespsGet=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_articlespsGet, '');
INPTYPES.TBL_WAArenderBlog_articlespsSearch=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_articlespsSearch, '');
INPTYPES.TBL_WAArenderBlog_categoryTies=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoryTies, '');
INPTYPES.TBL_WAArenderBlog_categoryTiespsAdd=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoryTiespsAdd, '');
INPTYPES.TBL_WAArenderBlog_categoryTiespsDrop=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoryTiespsDrop, '');
INPTYPES.TBL_WAArenderBlog_categoryTiespsEdit=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoryTiespsEdit, '');
INPTYPES.TBL_WAArenderBlog_categoryTiespsGet=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoryTiespsGet, '');
INPTYPES.TBL_WAArenderBlog_categoryTiespsSearch=RMFbasicMultiInput('', '', '', INPTYPES_inpLists.TBL_WAArenderBlog_categoryTiespsSearch, '');
INPTYPES.string=RMFbasicInput('', '', function(){
        if(this.inp.value.length > 254){
           this.inp.value=this.inp.value.slice(0, 253);
        } 
	return this.inp.value;
}, '', function(config, ret){
	RMF_extractForExtension(ret,this.singleLine(config));
    ret.inp.addEventListener('change', function(){
        this.value=this.value.slice(0, 253);
    });
}, 'label');
INPTYPES.basicPk=RMFbasicInput('', '', function(){
   var v=parseInt(this.inp.value);
   if(isNaN(v) || v<=0 || v>4294967295){
      return '';
   }
	return v;
}, '', function(config, ret){
	RMF_extractForExtension(ret,this.singleLine(config));
   ret.inp.addEventListener("change", function(){
      var v=this.value;
       if(isNaN(v) || v<=0 || v>4294967295){
         return '';
       }
   });
}, 'label');
INPTYPES.boolean=RMFbasicInput('', '', function(){
	return this.inp.checked;
   
}, function(v){
   this.inp.checked=parseInt(v) || 0;
}, function(config, ret){
	RMF_extractForExtension(ret,this.checkbox(config));
     ret.SET=function(v){
        this.inp.checked=!!parseInt(v);
     }
     
}, 'label');
INPTYPES.date_time=RMFbasicInput('', '', function(){
   var temp=this.ts_all_inps.COLL();
   
   var ret= temp.year+"-"+temp.month+"-"+temp.day+" "+temp.hours+":"+temp.minutes+":"+temp.seconds;

   if(temp.microSeconds !== ''){
      ret+="."+ret.microSeconds;
   }
   if(ret === '-- ::'){return '';}
   return ret;
   
}, function(v){
   if(!v || v === ''){return;}
   var datTim=v.split(' ');
   var datSpl=datTim[0].split('-');
   var timMic=datTim[1].split('.');
   var timSpl=timMic[0].split(':');
   this.ts_all_inps.SET({
      year:datSpl[0],
      month:datSpl[1],
      day:datSpl[2],
      hours:timSpl[0],
      minutes:timSpl[1],
      seconds:timSpl[2],
      microSeconds:timMic[1]
   });
}, function(config, ret){
   
   ret.ts_all_inps=this.compound(_object.COMBINE(config,{
       inps:[
         {
            name:'year',
            placeHolder:'yyyy',
            type:'singleLine'
         },
         {
            type:'span',
            text:'-'
         },
         {
            name:'month',
            placeHolder:'mm',
            type:'singleLine'
         },
         {
            type:'span',
            text:'-'
         },
         {
            name:'day',
            placeHolder:'dd',
            type:'singleLine'
         },
         {
            type:'span',
            text:' '
         },
         {
            name:'hours',
            placeHolder:'hh',
            type:'singleLine'
         },
         {
            type:'span',
            text:':'
         },
         {
            name:'minutes',
            placeHolder:'mm',
            type:'singleLine'
         },
         {
            type:'span',
            text:':'
         },
         {
            name:'seconds',
            placeHolder:'ss',
            type:'singleLine'
         },
         {
            type:'span',
            text:'.'
         },
         {
            name:'microSeconds',
            placeHolder:'------',
            type:'singleLine'
         },
       ]
   }));
   ret.el=ret.ts_all_inps.el;
   ret.inp=ret.ts_all_inps.inp;
   ret.ts_all_inps.inp.addEventListener('change', function(){
      
   });
}, 'label');
INPTYPES.para=RMFbasicInput('', '', function(){
	return this.inp.value;
}, '', function(config, ret){
	RMF_extractForExtension(ret,this.paragraph(config));
}, 'label');
INPTYPES.integer=RMFbasicInput('', '', function(){
   var v=parseInt(this.inp.value);
   if(isNaN(v) || v>2147483647){return '';}
	return v;
}, '', function(config, ret){
	RMF_extractForExtension(ret,this.singleLine(config));
   ret.inp.addEventListener('change', function(){
      var v=parseInt(this.value);
      if(isNaN(v) || v> 2147483647){this.value='';}
   });
}, 'label');
`--AdminSuperRMFData--`
</script>
<style>
#screenCaptureWrapper .basicModalBacker{
    background-color:transparent;
}
#screenCaptureWrapper .basicModalClient{
    bottom:5%;
    height:15%;
}

.lds-spinner {
  color: official;
  display: inline-block;
  position: relative;
  width: 80px;
  height: 80px;
}
.lds-spinner div {
  transform-origin: 40px 40px;
  animation: lds-spinner 1.2s linear infinite;
}
.lds-spinner div:after {
  content: " ";
  display: block;
  position: absolute;
  top: 3px;
  left: 37px;
  width: 6px;
  height: 18px;
  border-radius: 20%;
  background: #fff;
}
.lds-spinner div:nth-child(1) {
  transform: rotate(0deg);
  animation-delay: -1.1s;
}
.lds-spinner div:nth-child(2) {
  transform: rotate(30deg);
  animation-delay: -1s;
}
.lds-spinner div:nth-child(3) {
  transform: rotate(60deg);
  animation-delay: -0.9s;
}
.lds-spinner div:nth-child(4) {
  transform: rotate(90deg);
  animation-delay: -0.8s;
}
.lds-spinner div:nth-child(5) {
  transform: rotate(120deg);
  animation-delay: -0.7s;
}
.lds-spinner div:nth-child(6) {
  transform: rotate(150deg);
  animation-delay: -0.6s;
}
.lds-spinner div:nth-child(7) {
  transform: rotate(180deg);
  animation-delay: -0.5s;
}
.lds-spinner div:nth-child(8) {
  transform: rotate(210deg);
  animation-delay: -0.4s;
}
.lds-spinner div:nth-child(9) {
  transform: rotate(240deg);
  animation-delay: -0.3s;
}
.lds-spinner div:nth-child(10) {
  transform: rotate(270deg);
  animation-delay: -0.2s;
}
.lds-spinner div:nth-child(11) {
  transform: rotate(300deg);
  animation-delay: -0.1s;
}
.lds-spinner div:nth-child(12) {
  transform: rotate(330deg);
  animation-delay: 0s;
}
@keyframes lds-spinner {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

.RMFhiderClosed{
   height:0;
   overflow:hidden;
}

.RMFhiderLabel{
   cursor:pointer;
}
.basicModalParent{
   position:fixed;
   left:0;
   top:0;
   width:100%;
   height:100%;
}
.basicModalBacker{
   position:absolute;
   left:0;
   top:0;
   width:100%;
   height:100%;
   background-color:black;
   opacity:0.5;
}
.basicModalClient{
   box-sizing:border-box;
   position:absolute;
   left:5%;
   width:90%;
   top:5%;
   height:90%;
   background-color:seashell;
   overflow:scroll;
   padding-top:8vh;
}
.basicModalCloser{
   font-size:150%;
   position:fixed;
   right:8%;
   top:2%;
   padding:3px;
   cursor:pointer;
   background-color:white;
}



.RMF_modalWrapper{
   position:fixed;
   left:0; top:0; width:100%; height:100%;
}

.RMF_modalBacker{
   position:absolute; 
   left:0; top:0; width:100%; height:100%;
   opacity:0;
}

.RMF_modalClient{
   position:absolute;
   left:3%;
   top:3%;
   height:94%; width:40%;
   color:white;
   text-shadow: 0 0 30px white;
}

.RMF_modalTicker{
   display:inline-block;
   
}

.RMF_modalAppendage{
   display:inline-block;
   background-color:tan;
   padding:8px;
}
.cardBasic{
   margin:4px;
   padding:1px;
}
.cardBasic:empty{
	margin:0; padding:0;
}

.tableSearchsectionLabel{
  border:3px ridge gold;
  padding:2px;
  margin-top:3px;
  margin-bottom:20px;
}

.tableSearchsectionLabel+.tableSearchsectionLabel{
   border-top:3px solid #00ff00;
   
}

.tableSearchsectionLabel .tableSearchsectionLabel{
   border:3px ridge green;
}
.tableSearchsectionLabel .tableSearchsectionLabel .tableSearchsectionLabel{
   border:3px ridge pink;
}

.tableSearchResult{
   border:1px solid black;
   margin:4px;
   padding:2px;
   display:inline-block;
}


.RMFdynamicOnCheckboxFallthroughsectionLabel{
  border:1px dotted black;
}


.basicModalWrapper{
   position:fixed;
   top:0;
   left:0;
   width:100%;
   height:100%;
}
.basicModalBacker{
   position:absolute;
   top:0; left:0;
   width:100%;
   height:100%;
   background-color:black;
   opacity:0.75;
}
.basicModalClient{
   position:absolute;
   top:5%; left:5%;
   height:90%; width:90%;
   background-color:seashell;
   padding:5px; overflow:scroll;
}
.basicModalCloser{
   position:fixed;
   top:1%;
   right:1%;
   background-color:white;
   padding:3px;
   cursor:pointer;
}
.basicModalCloser::BEFORE{
   content:"X"
}
.SoftNotification-Wrapper{
   background-color:lightBlue;
   border:2px solid orange;
   border-radius:10px;
   position:fixed;
   bottom:1%;
   right:1%;
   max-width:300px;
   padding:8px;
   transition:opacity 500ms;
   color:black;
   
}

.SoftNotification-ActionWrapper{
   text-align:right; 
   padding:2px;
   margin-bottom:3px;
}
.SoftNotification-ActionWrapper button{

}

.SoftNotification-BodyWrapper{
   padding:2px;
}
#contactForm-CatNavWrapper::BEFORE{
	content:'State';
	display:block;
	font-size:130%;
	font-weight:bold;
}
#contactForm-ListWrapper::BEFORE{
	content:'Results';
	display:block;
	font-size:130%;
	font-weight:bold;
}
#contactForm-FormNavWrapper::BEFORE{
	content:'Forms';
	display:block;
	font-size:130%;
	font-weight:bold;
}

/* Basic button styles */
.contactFormCategoryButton {
  display: inline-block;
  margin:15px;
  padding: 10px 20px;
  font-size: 16px;
  border: 3px outset gold;
  border-radius: 5px;
  background-color: #3498db;
  color: #ffffff;
  cursor: pointer;
  text-align: center;
  text-decoration: none;
}
#selected-contactFormCategoryButton{
	background-color:black;
	color:white;
	border-style:inset;
}
/* Button hover effect */
.contactFormCategoryButton:hover {
  background-color: #2980b9;
}

/* Button active effect */
.contactFormCategoryButton:active {
  background-color: #216a94;
}

/* Basic button styles */
.contactFormFormButton {
  display: inline-block;
  margin:15px;
  padding: 10px 20px;
  font-size: 16px;
  border:3px outset orange;
  border-radius: 5px;
  background-color: pink;
  color: black;
  cursor: pointer;
  text-align: center;
  text-decoration: none;
}
#selected-contactFormFormButton{
	background-color:black;
	color:white;
	border-style:inset;
}

/* Button hover effect */
.contactFormFormButton:hover {
  background-color: #2980b9;
}

/* Button active effect */
.contactFormFormButton:active {
  background-color: #216a94;
}

.ContactForm-Display-Wrapper{
	padding:8px;
	margin:4px;
	width:95%;
	max-width:650px;
	border:2px solid gold;
	background-color:seashell;
}
.ContactForm-Display-Actions{
	margin-bottom:8px;
	margin-top:2px;
}
.ContactForm-Display-SingleLine{
	display:inline-block;
	margin:5px;
	padding:2px;
	background-color:lightBlue;
	border-radius:3px;
}
.ContactForm-Display-ActionButton{
	margin:4px;
}
.ContactForm-Display-Paragraph[open]{
	display:inline-block;
	max-width:600px;
	width:95%;
	border:2px solid orange;
	padding:6px;
	border-radius:20px;
}
.ContactForm-Display-Paragraph summary, .ContactForm-Display-ImageDetailsWrapper>summary, .ContactForm-Display-ArchiveMonth>summary{
	width:fit-content;
	background-color:orange;
	padding:4px;
	max-width:600px;
	border-radius:10px;
	margin-bottom:8px;
	margin-top:8px;
}

.ContactForm-Display-SingleLabel{
	color:darkBlue;
	font-weight:bold;
}
.ContactForm-Display-ImageDetailsWrapper, .ContactForm-Display-ArchiveMonth{
	margin-left:25px;
}
.ContactForm-Display-ImageWrapper img{
   max-height:20vh;
   display:inline-block;
   vertical-align:middle;
   
}
.ContactForm-Display-ImageCommandWrapper{
	display:inline-block;
	vertical-align:middle;
}
.ContactForm-Display-ImageCommandWrapper>*{
	margin:8px;
}
.ContactForm-Display-ImageLarge{
	max-width:100%;
	max-height:100%;
}

.ContactForm-Display-ImageCatcher>summary, .ContactForm-Display-ArchiveYear>summary{
	width:fit-content;
	margin:8px;
	background-color:pink;
	padding:8px;
	border-radius:3px;
}

.ContactForm-Display-ImageWrapper{
	margin-top:10px;
	margin-bottom:10px;
}

#BlogEditor-ListCatSelector label{
	margin:20px;
}

#BlogEditor-SelectedPubSelector{
	border-radius:50%;
	border:2px solid gold;
	padding:20px;
}

.BlogEditor-ListNavButtons{
	position:fixed;
	bottom:1%;
}

#BlogEditor-NextButton{
	right:1%;
}
#BlogEditor-PrevButton{
	left:1%;
}
#BlogEditor-ListCatcher{
	padding-top:30px;
	padding-bottom:30px;
}

.BlogEditor-ArtCard-Wrapper{
	margin-top:8px;
}
.BlogEditor-ArtCard{
	display:inline-block;
	border:2px solid blue;
	border-radius:8px;
	padding:9px;
}
.BlogEditor-ArtCard-Title{
	font-weight:bold;
	font-size:125%;
}
.BlogEditor-ArtCard-CommCont{
	border-bottom:3px dashed blue;
	margin-bottom:6px;
}
.BlogEditor-ArtCard-CommCont button{
	margin:10px;
}


.Blog-CategoryEditor-Form .rmfSubmitButton{
	margin-top:20px;
}
.Blog-CategoryEditor-Form .RMFdynamicListdynamicListMem{
	padding:4px;
	margin:8px;
	border:2px solid gold;
}
#Blog-Editor-ComCatcher{
	position:fixed;
	bottom:0;
	left:0;
	width:60%;
	padding:8px;
	
}
#Blog-Editor-ComCatcher:empty{
	display:none;
}

#Blog-Editor-Wrapper{
	
	padding-bottom:25vh;
}
#Blog-Editor-Wrapper details{
	padding-left:8px;
}
#Blog-Editor-Wrapper details>summary{
	
	margin-left:-8px;
	user-select:none;
}

#Blog-Editor-Wrapper .RMFdynamicListdynamicListMem{
	padding:8px;
	border:3px solid gold;
	margin:4px;
}

#Blog-Editor-Wrapper textarea{
	width:95%;
	max-width:400px;
	height:30vh;
	
}

.Blog-Editor-ImagePreview,.Blog-Editor-VideoPreview{
	max-height:25vh;
	max-width:100%;
}

#Blog-Editor-SubmitButton{
	position:fixed;
	bottom:1%;
	right:1%;
	
}
#Blog-Editor-TemplateButton{
	position:fixed;
	bottom:10%;
	right:1%;
	
}

.htmlTagButton{
   margin:4px;
   overflow:hidden;
}
.htmlInputDetails{
   margin:2px;
   border-bottom:2px solid black;
}
.htmlSCTagButton::AFTER{
   content:' (SC) '
}
`--AdminSuperCSS--`
</style>
<style>
nav{
	position:sticky;
	top:1%;
	height:0;
}
nav>div{
	display:inline-block;
	width:49%;
	height:0;
}
#navLeft{
	text-align:left;
}
#navRight{
	text-align:right;
}
nav>div>span{
   padding:4px;
   background-color:lightBlue;
   border:3px solid gold;
   cursor:pointer;
   position:relative;
   top:5px;
}
h1{
   margin-top:50px;
}
#upButton:empty{
   display:none;
}
main{
	min-height:100vh;
}

.mainNavButtons{
  display: inline-block;
  padding: 10px 20px;
  background-color: #3498db;
  color: #ffffff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
   /* Adjust the values as needed */
  transition: box-shadow 0.3s ease-in-out;
  box-shadow: 0px 8px 12px rgba(0, 0, 0, 0.2); /* Adjust the values for the hover effect */
  margin:15px;
}

.mainNavButtons:hover {
  box-shadow:none;
}

.tableActionButtons{
	margin:8px;
}

</style>

</head>
<body onload="IGNITE()">
<header></header>
<nav><div id="navLeft"><span id="upButton"></span></div><div id="navRight"><span onclick="if(!confirm('Are you sure you want to log out?')){return;}location.href='../logout.php';">Logout</span></div></nav>
<h1></h1>

<main>

</main>

</body>
</html>